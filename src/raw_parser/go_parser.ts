/* eslint-disable */



const peggyParser: {parse: any, SyntaxError: any, DefaultTracer?: any} = // @generated by Peggy 4.0.2.
//
// https://peggyjs.org/
// @ts-ignore
(function() {
// @ts-ignore
  "use strict";


// @ts-ignore
  function makeProgram(declaration_list, function_list) {
// @ts-ignore
  	return {
// @ts-ignore
      type: "program",
// @ts-ignore
      top_declarations: declaration_list
    }
  }

// @ts-ignore
  function makeIdentifier(id) {
// @ts-ignore
    return {
// @ts-ignore
      type: "identifier",
// @ts-ignore
      name: id,
// @ts-ignore
      val_type: null
    }
  }

// @ts-ignore
  function makeLiteral(lit) {
// @ts-ignore
    return {
// @ts-ignore
      type: "literal",
// @ts-ignore
      value: lit,
// @ts-ignore
      val_type: makeBasicType(typeof lit)
    }
  }

// @ts-ignore
  function makeInteger(i) {
// @ts-ignore
    return parseInt(i.join(""), 10);
  }

// @ts-ignore
  function makeFloat(int, frac) {
// @ts-ignore
    return parseFloat(int.join("") + "." + frac.join(""), 10);
  }

// @ts-ignore
  function makeString(s) {
// @ts-ignore
    return s.join("");
  }

// @ts-ignore
  function makeBoolean(b) {
// @ts-ignore
    return b === "true";
  }
  
// @ts-ignore
  function makeApplication(operator, operands) {
// @ts-ignore
  	return {
// @ts-ignore
      type: "application",
// @ts-ignore
      operator: operator,
// @ts-ignore
      operands: operands,
    }
  }
  
// @ts-ignore
  function makeDeclaration(id, val, decType) {
// @ts-ignore
    return {
// @ts-ignore
      type: "declaration",
// @ts-ignore
      declaration_type: decType,
// @ts-ignore
      ids: id,
// @ts-ignore
      vals: val
    };
  }
  
// @ts-ignore
  function makeDeclarations(id_list, val_list, decType, infer) {
// @ts-ignore
    if (val_list.length === 0 && !infer) {
// @ts-ignore
      return makeDeclaration(id_list, id_list.map(id => getDefault(id.val_type)), decType);
    }
    
// @ts-ignore
    if (infer) {
      // take type from the values and assign to the identifiers
    }

// @ts-ignore
    return makeDeclaration(id_list, val_list, decType);
  }
  
// @ts-ignore
  function format_declaration(decType, declaration) {
// @ts-ignore
    declaration.declaration_type = decType;
// @ts-ignore
    return declaration;
  }

// @ts-ignore
  function getDefault(type) {
// @ts-ignore
          switch (type.type_value) {
// @ts-ignore
            case "number": return makeLiteral(0);
// @ts-ignore
            case "bool": return makeLiteral(false);
// @ts-ignore
            case "string": return makeLiteral("");
    }
  }

// @ts-ignore
  function makeUnop(opcode, expr) {
// @ts-ignore
    return {
// @ts-ignore
      type: "unop",
// @ts-ignore
      opcode: opcode,
// @ts-ignore
      expr: expr
    }
  }

// @ts-ignore
  function makeBinop(left, opcode, right) {
// @ts-ignore
    return {
// @ts-ignore
      type: "binop",
// @ts-ignore
      left: left,
// @ts-ignore
      opcode: opcode,
// @ts-ignore
      right: right
    }
  }

// @ts-ignore
  function makeExpressionStatement(expression) {
// @ts-ignore
    return {
// @ts-ignore
      type: "expressionStatement",
// @ts-ignore
      expression: expression
    }
  }

// @ts-ignore
  function makeReturnStatement(expression) {
// @ts-ignore
    return {
// @ts-ignore
      type: "returnStatement",
// @ts-ignore
      expressions: expression
    }
  }
  
// @ts-ignore
  function makeAssignmentStatement(identifiers, values) {
// @ts-ignore
    return {
// @ts-ignore
      type: "assignmentStatement",
// @ts-ignore
      ids: identifiers,
// @ts-ignore
      vals: values
    }
  }
  
// @ts-ignore
  function makeIndexAccess(val, index) {
// @ts-ignore
    return {
// @ts-ignore
      type: "indexAccess",
// @ts-ignore
      index: index,
// @ts-ignore
      accessed: val,
    }
  }
  
// @ts-ignore
  function makeStructElement(name) {
// @ts-ignore
  	return {
// @ts-ignore
    	type: "structElement",
// @ts-ignore
        name: name,
    }
  }
  
// @ts-ignore
  function makeStructAccess(accessed, field) {
// @ts-ignore
  	return {
// @ts-ignore
      type: "structAccess",
// @ts-ignore
      accessed: accessed,
// @ts-ignore
      field: field
    }
  }
  
// @ts-ignore
  function makeStructFieldInstantiation(field, ex) {
// @ts-ignore
  	return {
// @ts-ignore
    	type: "structFieldInstantiation",
// @ts-ignore
        field: field,
// @ts-ignore
        expr: ex
    }
  }  
  
// @ts-ignore
  function makeStructLiteral(type, fields) {
// @ts-ignore
  	return {
// @ts-ignore
    	type: "structLiteral",
// @ts-ignore
        val_type: type,
// @ts-ignore
        fields: fields
    }
  }
  
// @ts-ignore
  function makeIfStatement(conditional, consequent, alternate, short) {
// @ts-ignore
  	return {
// @ts-ignore
      type: "ifStatement",
// @ts-ignore
      cond: conditional,
// @ts-ignore
      cons: consequent,
// @ts-ignore
      alt: alternate,
// @ts-ignore
      short: short
    }
  }

// @ts-ignore
  function makeForStatement(init, cond, post, body) {
// @ts-ignore
    return {
// @ts-ignore
      type: "forStatement",
// @ts-ignore
      init: init,
// @ts-ignore
      cond: cond,
// @ts-ignore
      post: post,
// @ts-ignore
      body: body
    }
  }

// @ts-ignore
  function makeGoStatement(app) {
// @ts-ignore
  	if (app.type !== "application") {
// @ts-ignore
      throw new Error("go statement must be applied to an application!");
    }
// @ts-ignore
    return {
// @ts-ignore
      type: "goStatement",
// @ts-ignore
      app: app
    }
  }
  
// @ts-ignore
  function makeSendStatement(chan, val) {
// @ts-ignore
    return {
// @ts-ignore
      type: "sendStatement",
// @ts-ignore
      chan: chan,
// @ts-ignore
      val: val,
// @ts-ignore
      inSelect: false
    }
  }

// @ts-ignore
  function makeReceiveExpression(chan) {
// @ts-ignore
    return {
// @ts-ignore
      type: "receiveExpression",
// @ts-ignore
      chan: chan,
// @ts-ignore
      inSelect: false
    }
  }

// @ts-ignore
  function makeFunction(name, formals, retType, body) {
// @ts-ignore
    return {
// @ts-ignore
      type: "function",
// @ts-ignore
      name: name,
// @ts-ignore
      formals: formals,
// @ts-ignore
      retType: retType,
// @ts-ignore
      body: body
    }
  }
  
// @ts-ignore
  function makeType(others) {
// @ts-ignore
    return {
// @ts-ignore
      type: "type",
// @ts-ignore
      val_type: "Type",
// @ts-ignore
      ...others
    }
  }
  
// @ts-ignore
  function makeBasicType(type) {
// @ts-ignore
    return makeType({
// @ts-ignore
      type_type: "basic",
// @ts-ignore
      type_value: type === "boolean" ? "bool" : type
    })
  }
  
// @ts-ignore
  function makeTupleType(types) {
// @ts-ignore
    if (types.length === 1) {
// @ts-ignore
      return types[0];
    }
// @ts-ignore
    return makeType({
// @ts-ignore
      type_type: "tuple",
// @ts-ignore
      type_values: types
    })
  }
  
// @ts-ignore
  function makeFunctionType(formals, ret) {
// @ts-ignore
  	return makeType({
// @ts-ignore
      type_type: "function",
// @ts-ignore
      formal_values: formals,
// @ts-ignore
      return_value: ret
    })
  }
  
// @ts-ignore
  function makeChanType(chan_str, chan_type) {
// @ts-ignore
  	let send_receive = "generic";
// @ts-ignore
    if (chan_str === "<-chan") {
// @ts-ignore
    	send_receive = "receive";
    } 
// @ts-ignore
    if (chan_str === "chan<-") {
// @ts-ignore
    	send_receive = "send";
    }
// @ts-ignore
    return makeType({
// @ts-ignore
      type_type: "chan",
// @ts-ignore
      send_receive_type: send_receive,
// @ts-ignore
      chan_value_type: chan_type
    })
  }
  
// @ts-ignore
  function makeArrayType(size, arr_type) {
// @ts-ignore
  	return makeType({
// @ts-ignore
      type_type: "array",
// @ts-ignore
      size: parseInt(size.join(""), 10),
// @ts-ignore
      arr_type: arr_type,
    })
  }
  
// @ts-ignore
  function makeSliceType(slc_type) {
// @ts-ignore
  	return makeType({
// @ts-ignore
      type_type: "slice",
// @ts-ignore
      slice_type: slc_type,
    })
  }
  
// @ts-ignore
  function makeStructType(elems) {
// @ts-ignore
  	return makeType({
// @ts-ignore
      type_type: "struct",
// @ts-ignore
      elems: elems,
    })
  }
  
// @ts-ignore
  function makeCustomType(custom) {
// @ts-ignore
  	return makeType({
// @ts-ignore
      type_type: "custom",
// @ts-ignore
      type_name: custom
    })
  }
  
// @ts-ignore
  function makeTypeDeclaration(name, dec) {
// @ts-ignore
  	return {
// @ts-ignore
    	type: "typeDeclaration",
// @ts-ignore
        name: name,
// @ts-ignore
        dec_type: dec,
    }
  }

// @ts-ignore
function peg$subclass(child, parent) {
// @ts-ignore
  function C() { this.constructor = child; }
// @ts-ignore
  C.prototype = parent.prototype;
// @ts-ignore
  child.prototype = new C();
}

// @ts-ignore
function peg$SyntaxError(message, expected, found, location) {
// @ts-ignore
  var self = Error.call(this, message);
  // istanbul ignore next Check is a necessary evil to support older environments
// @ts-ignore
  if (Object.setPrototypeOf) {
// @ts-ignore
    Object.setPrototypeOf(self, peg$SyntaxError.prototype);
  }
// @ts-ignore
  self.expected = expected;
// @ts-ignore
  self.found = found;
// @ts-ignore
  self.location = location;
// @ts-ignore
  self.name = "SyntaxError";
// @ts-ignore
  return self;
}

// @ts-ignore
peg$subclass(peg$SyntaxError, Error);

// @ts-ignore
function peg$padEnd(str, targetLength, padString) {
// @ts-ignore
  padString = padString || " ";
// @ts-ignore
  if (str.length > targetLength) { return str; }
// @ts-ignore
  targetLength -= str.length;
// @ts-ignore
  padString += padString.repeat(targetLength);
// @ts-ignore
  return str + padString.slice(0, targetLength);
}

// @ts-ignore
peg$SyntaxError.prototype.format = function(sources) {
// @ts-ignore
  var str = "Error: " + this.message;
// @ts-ignore
  if (this.location) {
// @ts-ignore
    var src = null;
// @ts-ignore
    var k;
// @ts-ignore
    for (k = 0; k < sources.length; k++) {
// @ts-ignore
      if (sources[k].source === this.location.source) {
// @ts-ignore
        src = sources[k].text.split(/\r\n|\n|\r/g);
// @ts-ignore
        break;
      }
    }
// @ts-ignore
    var s = this.location.start;
// @ts-ignore
    var offset_s = (this.location.source && (typeof this.location.source.offset === "function"))
// @ts-ignore
      ? this.location.source.offset(s)
// @ts-ignore
      : s;
// @ts-ignore
    var loc = this.location.source + ":" + offset_s.line + ":" + offset_s.column;
// @ts-ignore
    if (src) {
// @ts-ignore
      var e = this.location.end;
// @ts-ignore
      var filler = peg$padEnd("", offset_s.line.toString().length, ' ');
// @ts-ignore
      var line = src[s.line - 1];
// @ts-ignore
      var last = s.line === e.line ? e.column : line.length + 1;
// @ts-ignore
      var hatLen = (last - s.column) || 1;
// @ts-ignore
      str += "\n --> " + loc + "\n"
// @ts-ignore
          + filler + " |\n"
// @ts-ignore
          + offset_s.line + " | " + line + "\n"
// @ts-ignore
          + filler + " | " + peg$padEnd("", s.column - 1, ' ')
// @ts-ignore
          + peg$padEnd("", hatLen, "^");
// @ts-ignore
    } else {
// @ts-ignore
      str += "\n at " + loc;
    }
  }
// @ts-ignore
  return str;
};

// @ts-ignore
peg$SyntaxError.buildMessage = function(expected, found) {
// @ts-ignore
  var DESCRIBE_EXPECTATION_FNS = {
// @ts-ignore
    literal: function(expectation) {
// @ts-ignore
      return "\"" + literalEscape(expectation.text) + "\"";
    },

// @ts-ignore
    class: function(expectation) {
// @ts-ignore
      var escapedParts = expectation.parts.map(function(part) {
// @ts-ignore
        return Array.isArray(part)
// @ts-ignore
          ? classEscape(part[0]) + "-" + classEscape(part[1])
// @ts-ignore
          : classEscape(part);
      });

// @ts-ignore
      return "[" + (expectation.inverted ? "^" : "") + escapedParts.join("") + "]";
    },

// @ts-ignore
    any: function() {
// @ts-ignore
      return "any character";
    },

// @ts-ignore
    end: function() {
// @ts-ignore
      return "end of input";
    },

// @ts-ignore
    other: function(expectation) {
// @ts-ignore
      return expectation.description;
    }
  };

// @ts-ignore
  function hex(ch) {
// @ts-ignore
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

// @ts-ignore
  function literalEscape(s) {
// @ts-ignore
    return s
// @ts-ignore
      .replace(/\\/g, "\\\\")
// @ts-ignore
      .replace(/"/g,  "\\\"")
// @ts-ignore
      .replace(/\0/g, "\\0")
// @ts-ignore
      .replace(/\t/g, "\\t")
// @ts-ignore
      .replace(/\n/g, "\\n")
// @ts-ignore
      .replace(/\r/g, "\\r")
// @ts-ignore
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
// @ts-ignore
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

// @ts-ignore
  function classEscape(s) {
// @ts-ignore
    return s
// @ts-ignore
      .replace(/\\/g, "\\\\")
// @ts-ignore
      .replace(/\]/g, "\\]")
// @ts-ignore
      .replace(/\^/g, "\\^")
// @ts-ignore
      .replace(/-/g,  "\\-")
// @ts-ignore
      .replace(/\0/g, "\\0")
// @ts-ignore
      .replace(/\t/g, "\\t")
// @ts-ignore
      .replace(/\n/g, "\\n")
// @ts-ignore
      .replace(/\r/g, "\\r")
// @ts-ignore
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
// @ts-ignore
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

// @ts-ignore
  function describeExpectation(expectation) {
// @ts-ignore
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

// @ts-ignore
  function describeExpected(expected) {
// @ts-ignore
    var descriptions = expected.map(describeExpectation);
// @ts-ignore
    var i, j;

// @ts-ignore
    descriptions.sort();

// @ts-ignore
    if (descriptions.length > 0) {
// @ts-ignore
      for (i = 1, j = 1; i < descriptions.length; i++) {
// @ts-ignore
        if (descriptions[i - 1] !== descriptions[i]) {
// @ts-ignore
          descriptions[j] = descriptions[i];
// @ts-ignore
          j++;
        }
      }
// @ts-ignore
      descriptions.length = j;
    }

// @ts-ignore
    switch (descriptions.length) {
// @ts-ignore
      case 1:
// @ts-ignore
        return descriptions[0];

// @ts-ignore
      case 2:
// @ts-ignore
        return descriptions[0] + " or " + descriptions[1];

// @ts-ignore
      default:
// @ts-ignore
        return descriptions.slice(0, -1).join(", ")
// @ts-ignore
          + ", or "
// @ts-ignore
          + descriptions[descriptions.length - 1];
    }
  }

// @ts-ignore
  function describeFound(found) {
// @ts-ignore
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

// @ts-ignore
  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

// @ts-ignore
function peg$parse(input, options) {
// @ts-ignore
  options = options !== undefined ? options : {};

// @ts-ignore
  var peg$FAILED = {};
// @ts-ignore
  var peg$source = options.grammarSource;

// @ts-ignore
  var peg$startRuleFunctions = { start: peg$parsestart };
// @ts-ignore
  var peg$startRuleFunction = peg$parsestart;

// @ts-ignore
  var peg$c0 = ";";
  var peg$c1 = "var";
  var peg$c2 = "const";
  var peg$c3 = "(";
  var peg$c4 = ")";
  var peg$c5 = "=";
  var peg$c6 = ":=";
  var peg$c7 = ",";
  var peg$c8 = "func";
  var peg$c9 = "{";
  var peg$c10 = "}";
  var peg$c11 = "break";
  var peg$c12 = "case";
  var peg$c13 = "chan";
  var peg$c14 = "continue";
  var peg$c15 = "default";
  var peg$c16 = "defer";
  var peg$c17 = "else";
  var peg$c18 = "fallthrough";
  var peg$c19 = "for";
  var peg$c20 = "go";
  var peg$c21 = "goto";
  var peg$c22 = "if";
  var peg$c23 = "import";
  var peg$c24 = "interface";
  var peg$c25 = "map";
  var peg$c26 = "package";
  var peg$c27 = "range";
  var peg$c28 = "return";
  var peg$c29 = "select";
  var peg$c30 = "struct";
  var peg$c31 = "switch";
  var peg$c32 = "type";
  var peg$c33 = "number";
  var peg$c34 = "bool";
  var peg$c35 = "string";
  var peg$c36 = "Type";
  var peg$c37 = "<-chan";
  var peg$c38 = "chan<-";
  var peg$c39 = "[";
  var peg$c40 = "]";
  var peg$c41 = ":";
  var peg$c42 = ".";
  var peg$c43 = "true";
  var peg$c44 = "false";
  var peg$c45 = "\"";
  var peg$c46 = "&&";
  var peg$c47 = "||";
  var peg$c48 = "==";
  var peg$c49 = "!=";
  var peg$c50 = "<=";
  var peg$c51 = ">=";
  var peg$c52 = "<-";
  var peg$c53 = "//";
  var peg$c54 = "/*";
  var peg$c55 = "*/";

  var peg$r0 = /^[a-zA-Z_]/;
  var peg$r1 = /^[a-zA-Z0-9_]/;
  var peg$r2 = /^[0-9]/;
  var peg$r3 = /^[^"]/;
  var peg$r4 = /^[<>]/;
  var peg$r5 = /^[+\-]/;
  var peg$r6 = /^[*\/%]/;
  var peg$r7 = /^[\-+!]/;
  var peg$r8 = /^[^\n]/;
  var peg$r9 = /^[ \t\n\r]/;

  var peg$e0 = peg$literalExpectation(";", false);
  var peg$e1 = peg$literalExpectation("var", false);
  var peg$e2 = peg$literalExpectation("const", false);
  var peg$e3 = peg$literalExpectation("(", false);
  var peg$e4 = peg$literalExpectation(")", false);
  var peg$e5 = peg$literalExpectation("=", false);
  var peg$e6 = peg$literalExpectation(":=", false);
  var peg$e7 = peg$literalExpectation(",", false);
  var peg$e8 = peg$literalExpectation("func", false);
  var peg$e9 = peg$literalExpectation("{", false);
  var peg$e10 = peg$literalExpectation("}", false);
  var peg$e11 = peg$classExpectation([["a", "z"], ["A", "Z"], "_"], false, false);
  var peg$e12 = peg$classExpectation([["a", "z"], ["A", "Z"], ["0", "9"], "_"], false, false);
  var peg$e13 = peg$otherExpectation("reserved syntax keyword");
  var peg$e14 = peg$literalExpectation("break", false);
  var peg$e15 = peg$literalExpectation("case", false);
  var peg$e16 = peg$literalExpectation("chan", false);
  var peg$e17 = peg$literalExpectation("continue", false);
  var peg$e18 = peg$literalExpectation("default", false);
  var peg$e19 = peg$literalExpectation("defer", false);
  var peg$e20 = peg$literalExpectation("else", false);
  var peg$e21 = peg$literalExpectation("fallthrough", false);
  var peg$e22 = peg$literalExpectation("for", false);
  var peg$e23 = peg$literalExpectation("go", false);
  var peg$e24 = peg$literalExpectation("goto", false);
  var peg$e25 = peg$literalExpectation("if", false);
  var peg$e26 = peg$literalExpectation("import", false);
  var peg$e27 = peg$literalExpectation("interface", false);
  var peg$e28 = peg$literalExpectation("map", false);
  var peg$e29 = peg$literalExpectation("package", false);
  var peg$e30 = peg$literalExpectation("range", false);
  var peg$e31 = peg$literalExpectation("return", false);
  var peg$e32 = peg$literalExpectation("select", false);
  var peg$e33 = peg$literalExpectation("struct", false);
  var peg$e34 = peg$literalExpectation("switch", false);
  var peg$e35 = peg$literalExpectation("type", false);
  var peg$e36 = peg$otherExpectation("go type");
  var peg$e37 = peg$otherExpectation("inbuilt go type");
  var peg$e38 = peg$literalExpectation("number", false);
  var peg$e39 = peg$literalExpectation("bool", false);
  var peg$e40 = peg$literalExpectation("string", false);
  var peg$e41 = peg$literalExpectation("Type", false);
  var peg$e42 = peg$literalExpectation("<-chan", false);
  var peg$e43 = peg$literalExpectation("chan<-", false);
  var peg$e44 = peg$literalExpectation("[", false);
  var peg$e45 = peg$literalExpectation("]", false);
  var peg$e46 = peg$classExpectation([["0", "9"]], false, false);
  var peg$e47 = peg$literalExpectation(":", false);
  var peg$e48 = peg$literalExpectation(".", false);
  var peg$e49 = peg$literalExpectation("true", false);
  var peg$e50 = peg$literalExpectation("false", false);
  var peg$e51 = peg$literalExpectation("\"", false);
  var peg$e52 = peg$classExpectation(["\""], true, false);
  var peg$e53 = peg$literalExpectation("&&", false);
  var peg$e54 = peg$literalExpectation("||", false);
  var peg$e55 = peg$literalExpectation("==", false);
  var peg$e56 = peg$literalExpectation("!=", false);
  var peg$e57 = peg$literalExpectation("<=", false);
  var peg$e58 = peg$literalExpectation(">=", false);
  var peg$e59 = peg$classExpectation(["<", ">"], false, false);
  var peg$e60 = peg$classExpectation(["+", "-"], false, false);
  var peg$e61 = peg$classExpectation(["*", "/", "%"], false, false);
  var peg$e62 = peg$literalExpectation("<-", false);
  var peg$e63 = peg$classExpectation(["-", "+", "!"], false, false);
  var peg$e64 = peg$otherExpectation("space");
  var peg$e65 = peg$otherExpectation("whitespace or comment");
  var peg$e66 = peg$literalExpectation("//", false);
  var peg$e67 = peg$classExpectation(["\n"], true, false);
  var peg$e68 = peg$literalExpectation("/*", false);
  var peg$e69 = peg$literalExpectation("*/", false);
  var peg$e70 = peg$anyExpectation();
  var peg$e71 = peg$classExpectation([" ", "\t", "\n", "\r"], false, false);
// @ts-ignore

  var peg$f0 = function(top_level_decs) {
// @ts-ignore
  	return makeProgram(top_level_decs.flat()); 
  };// @ts-ignore

  var peg$f1 = function(dec) {// @ts-ignore
return dec;};// @ts-ignore

  var peg$f2 = function(dec) {// @ts-ignore
return dec;};// @ts-ignore

  var peg$f3 = function(decType, declarations) {
    // ensure that the declaration type is correct;
// @ts-ignore
    return format_declaration(decType, declarations)
  };// @ts-ignore

  var peg$f4 = function(lists) {
// @ts-ignore
    const all_lists = lists.flat();
    // we need to take the identifiers of each list
    // and append them together

// @ts-ignore
    const all_ids = all_lists.map(list => list.ids).flat();

    // we also need to take the values of each list
    // and append them together

// @ts-ignore
    const all_vals = all_lists.map(list => list.vals ? list.vals : []).flat();

// @ts-ignore
    return makeDeclarations(all_ids, all_vals, "placeholder", false);
  };// @ts-ignore

  var peg$f5 = function(identifiers, vals) {
// @ts-ignore
    return makeDeclarations(identifiers, vals ? vals : [], "placeholder", false);
  };// @ts-ignore

  var peg$f6 = function(identifiers, vals) {  
// @ts-ignore
    return makeDeclarations(identifiers, vals, "var", true);
  };// @ts-ignore

  var peg$f7 = function(idList, type) {
// @ts-ignore
  idList.forEach(id => {id.val_type = type}); 
// @ts-ignore
 return idList; 
  };// @ts-ignore

  var peg$f8 = function(head, tail) {// @ts-ignore
return [head, ...tail]};// @ts-ignore

  var peg$f9 = function(head, tail) {// @ts-ignore
return [head, ...tail]};// @ts-ignore

  var peg$f10 = function(name, formals, retType, body) { 
// @ts-ignore
    return makeFunction(name, formals ? formals : [], retType, body);
  };// @ts-ignore

  var peg$f11 = function(formals, retType, body) {
// @ts-ignore
  	return makeFunction(null, formals ? formals : [], retType, body);
  };// @ts-ignore

  var peg$f12 = function(head, tail) {
    // append the tails to the head
    // flattten the tail - it is an array of arrays
// @ts-ignore
    const newTail = tail.map(t => t).flat();
// @ts-ignore
    return head.concat(newTail);
  };// @ts-ignore

  var peg$f13 = function(head, tail) { 
// @ts-ignore
    return makeIdentifier(head + tail.join("")); 
  };// @ts-ignore

  var peg$f14 = function() {
// @ts-ignore
    return makeBasicType(text());
  };// @ts-ignore

  var peg$f15 = function(types) { 
// @ts-ignore
    return makeTupleType(types);
  };// @ts-ignore

  var peg$f16 = function(head, tail) {// @ts-ignore
 return [head, ...tail] };// @ts-ignore

  var peg$f17 = function(formals, ret) {
// @ts-ignore
    return makeFunctionType(formals, ret); 
  };// @ts-ignore

  var peg$f18 = function(chan, chanType) {
// @ts-ignore
  	return makeChanType(chan, chanType);
  };// @ts-ignore

  var peg$f19 = function(type) {
// @ts-ignore
    return makeSliceType(type)
  };// @ts-ignore

  var peg$f20 = function(size, type) {
// @ts-ignore
  	return makeArrayType(size, type)
  };// @ts-ignore

  var peg$f21 = function(name, type) {
// @ts-ignore
  	const elemName = name;
// @ts-ignore
    elemName.val_type = type;
// @ts-ignore
    return makeStructElement(elemName)
  };// @ts-ignore

  var peg$f22 = function(structElems) {
// @ts-ignore
  	return makeStructType(structElems ? structElems : []);
  };// @ts-ignore

  var peg$f23 = function(head, tail) { 
// @ts-ignore
    return makeCustomType(head + tail.join("")); 
  };// @ts-ignore

  var peg$f24 = function(field, ex) {
// @ts-ignore
  	return makeStructFieldInstantiation(field, ex);
  };// @ts-ignore

  var peg$f25 = function(head, tail) {
// @ts-ignore
  	return [head, ...tail];
  };// @ts-ignore

  var peg$f26 = function(type, fields) {
// @ts-ignore
  	return makeStructLiteral(type, fields ? fields : [])
  };// @ts-ignore

  var peg$f27 = function(target, rest) {
// @ts-ignore
    return rest.reduce(function(wish, curr) {
// @ts-ignore
      const accumulative = curr;
// @ts-ignore
      return makeIndexAccess(wish, accumulative);
// @ts-ignore
    }, target);  
  };// @ts-ignore

  var peg$f28 = function(target, rest) {
// @ts-ignore
    return rest.reduce(function(wish, curr) {
// @ts-ignore
      return makeStructAccess(wish, curr);
// @ts-ignore
    }, target);  
  };// @ts-ignore

  var peg$f29 = function(head, tail) {// @ts-ignore
return [head, ...tail]};// @ts-ignore

  var peg$f30 = function(target, rest) {
// @ts-ignore
    return rest.reduce(function(wish, curr) {
// @ts-ignore
      const [type, accumulative] = curr;
// @ts-ignore
      if (type === "(") {
// @ts-ignore
      	return makeApplication(wish, accumulative ? accumulative : []);
      }
// @ts-ignore
      if (type === ".") {
// @ts-ignore
      	return makeStructAccess(wish, accumulative);
      }
// @ts-ignore
      return makeIndexAccess(wish, accumulative.type === "identifier" ? accumulative : makeLiteral(parseInt(accumulative.join(""), 10)));
// @ts-ignore
    }, target);  
  };// @ts-ignore

  var peg$f31 = function(literal) {// @ts-ignore
 return makeLiteral(literal); };// @ts-ignore

  var peg$f32 = function(int, frac) {
// @ts-ignore
    if (frac !== null) {
// @ts-ignore
      return makeFloat(int, frac);
    }
// @ts-ignore
    return makeInteger(int);
  };// @ts-ignore

  var peg$f33 = function(b) {// @ts-ignore
 return makeBoolean(b); };// @ts-ignore

  var peg$f34 = function(s) {// @ts-ignore
 return makeString(s); };// @ts-ignore

  var peg$f35 = function(left, rest) { 
// @ts-ignore
    return rest.reduce(function(wish, curr) {
// @ts-ignore
      return makeBinop(wish, curr[0], curr[1]);
// @ts-ignore
    }, left)
  };// @ts-ignore

  var peg$f36 = function(left, rest) { 
// @ts-ignore
    return rest.reduce(function(wish, curr) {
// @ts-ignore
      return makeBinop(wish, curr[0], curr[1]);
// @ts-ignore
    }, left)
  };// @ts-ignore

  var peg$f37 = function(left, rest) {
// @ts-ignore
    return rest.reduce(function(wish, curr) {
// @ts-ignore
      return makeBinop(wish, curr[0], curr[1]);
// @ts-ignore
    }, left)
  };// @ts-ignore

  var peg$f38 = function(left, rest) { 
// @ts-ignore
    return rest.reduce(function(wish, curr) {
// @ts-ignore
      return makeBinop(wish, curr[0], curr[1]);
// @ts-ignore
    }, left)
  };// @ts-ignore

  var peg$f39 = function(expr) {// @ts-ignore
 return expr; };// @ts-ignore

  var peg$f40 = function(opcode, expr) { 
// @ts-ignore
      if (opcode === "<-") {
// @ts-ignore
        return makeReceiveExpression(expr);
      }
// @ts-ignore
      return makeUnop(opcode, expr);
    };// @ts-ignore

  var peg$f41 = function(head, tail) {// @ts-ignore
return [head, ...tail]};// @ts-ignore

  var peg$f42 = function(identifiers, values) {
// @ts-ignore
    return makeAssignmentStatement(identifiers, values);
  };// @ts-ignore

  var peg$f43 = function(expression) {// @ts-ignore
 return makeExpressionStatement(expression); };// @ts-ignore

  var peg$f44 = function(expression) {// @ts-ignore
 return makeReturnStatement(expression ? expression : []); };// @ts-ignore

  var peg$f45 = function(short, cond, cons, alt) {
// @ts-ignore
  	return makeIfStatement(cond, cons, alt, short);
  };// @ts-ignore

  var peg$f46 = function(body) {// @ts-ignore
return body;};// @ts-ignore

  var peg$f47 = function(elif) {// @ts-ignore
return [elif];};// @ts-ignore

  var peg$f48 = function(init, cond, post, body) {
// @ts-ignore
  	return makeForStatement(init, cond, post, body);
  };// @ts-ignore

  var peg$f49 = function(app) {
    // TODO; find a way to assert application
// @ts-ignore
    return makeGoStatement(app);
  };// @ts-ignore

  var peg$f50 = function(chan, val) {
// @ts-ignore
  	return makeSendStatement(chan, val);
  };// @ts-ignore

  var peg$f51 = function(chan) {
// @ts-ignore
  	return makeReceiveExpression(chan);
  };// @ts-ignore

  var peg$f52 = function(identifiers, rval) {
// @ts-ignore
  	return makeDeclarations(identifiers, [rval], "var", true);
  };// @ts-ignore

  var peg$f53 = function(vals, rval) {
// @ts-ignore
  	return makeAssignmentStatement(vals, [rval])
  };// @ts-ignore

  var peg$f54 = function(rval) {
// @ts-ignore
  	return makeExpressionStatement(rval)
  };// @ts-ignore

  var peg$f55 = function(s) {
  	// set this flag to true
// @ts-ignore
    if (s.type === "sendStatement") {
// @ts-ignore
    	s.inSelect = true;
// @ts-ignore
    } else if (s.type === "expressionStatement") {
// @ts-ignore
      s.expression.inSelect = true;
// @ts-ignore
    } else if (s.type === "declaration") {
// @ts-ignore
      s.vals[0].inSelect = true;
// @ts-ignore
    } else if (s.type === "assignmentStatement") {
// @ts-ignore
      s.vals[0].inSelect = true;
    }
// @ts-ignore
    return {
// @ts-ignore
    	type: "selectCase",
// @ts-ignore
      statement: s
    }
  };// @ts-ignore

  var peg$f56 = function() {
// @ts-ignore
  	return {
// @ts-ignore
    	type: "defaultCase"
    }
  };// @ts-ignore

  var peg$f57 = function(branch, body) {
// @ts-ignore
  	branch.body = body ? body : []
// @ts-ignore
    return branch;
  };// @ts-ignore

  var peg$f58 = function(cases) {
// @ts-ignore
  	return {
// @ts-ignore
    	type: "selectStatement",
// @ts-ignore
      cases: cases ? cases : []
    }
  };// @ts-ignore

  var peg$f59 = function(name, dec) {
// @ts-ignore
  	return makeTypeDeclaration(name, dec);
  };// @ts-ignore

  var peg$f60 = function(e) {// @ts-ignore
 return e; };// @ts-ignore

  var peg$f61 = function() {// @ts-ignore
 return {type: "emptyStatement"}};
// @ts-ignore
  var peg$currPos = options.peg$currPos | 0;
// @ts-ignore
  var peg$savedPos = peg$currPos;
// @ts-ignore
  var peg$posDetailsCache = [{ line: 1, column: 1 }];
// @ts-ignore
  var peg$maxFailPos = peg$currPos;
// @ts-ignore
  var peg$maxFailExpected = options.peg$maxFailExpected || [];
// @ts-ignore
  var peg$silentFails = options.peg$silentFails | 0;

// @ts-ignore
  var peg$result;

// @ts-ignore
  if (options.startRule) {
// @ts-ignore
    if (!(options.startRule in peg$startRuleFunctions)) {
// @ts-ignore
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

// @ts-ignore
    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

// @ts-ignore
  function text() {
// @ts-ignore
    return input.substring(peg$savedPos, peg$currPos);
  }

// @ts-ignore
  function offset() {
// @ts-ignore
    return peg$savedPos;
  }

// @ts-ignore
  function range() {
// @ts-ignore
    return {
// @ts-ignore
      source: peg$source,
// @ts-ignore
      start: peg$savedPos,
// @ts-ignore
      end: peg$currPos
    };
  }

// @ts-ignore
  function location() {
// @ts-ignore
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

// @ts-ignore
  function expected(description, location) {
// @ts-ignore
    location = location !== undefined
// @ts-ignore
      ? location
// @ts-ignore
      : peg$computeLocation(peg$savedPos, peg$currPos);

// @ts-ignore
    throw peg$buildStructuredError(
// @ts-ignore
      [peg$otherExpectation(description)],
// @ts-ignore
      input.substring(peg$savedPos, peg$currPos),
// @ts-ignore
      location
    );
  }

// @ts-ignore
  function error(message, location) {
// @ts-ignore
    location = location !== undefined
// @ts-ignore
      ? location
// @ts-ignore
      : peg$computeLocation(peg$savedPos, peg$currPos);

// @ts-ignore
    throw peg$buildSimpleError(message, location);
  }

// @ts-ignore
  function peg$literalExpectation(text, ignoreCase) {
// @ts-ignore
    return { type: "literal", text: text, ignoreCase: ignoreCase };
  }

// @ts-ignore
  function peg$classExpectation(parts, inverted, ignoreCase) {
// @ts-ignore
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

// @ts-ignore
  function peg$anyExpectation() {
// @ts-ignore
    return { type: "any" };
  }

// @ts-ignore
  function peg$endExpectation() {
// @ts-ignore
    return { type: "end" };
  }

// @ts-ignore
  function peg$otherExpectation(description) {
// @ts-ignore
    return { type: "other", description: description };
  }

// @ts-ignore
  function peg$computePosDetails(pos) {
// @ts-ignore
    var details = peg$posDetailsCache[pos];
// @ts-ignore
    var p;

// @ts-ignore
    if (details) {
// @ts-ignore
      return details;
// @ts-ignore
    } else {
// @ts-ignore
      if (pos >= peg$posDetailsCache.length) {
// @ts-ignore
        p = peg$posDetailsCache.length - 1;
// @ts-ignore
      } else {
// @ts-ignore
        p = pos;
// @ts-ignore
        while (!peg$posDetailsCache[--p]) {}
      }

// @ts-ignore
      details = peg$posDetailsCache[p];
// @ts-ignore
      details = {
// @ts-ignore
        line: details.line,
// @ts-ignore
        column: details.column
      };

// @ts-ignore
      while (p < pos) {
// @ts-ignore
        if (input.charCodeAt(p) === 10) {
// @ts-ignore
          details.line++;
// @ts-ignore
          details.column = 1;
// @ts-ignore
        } else {
// @ts-ignore
          details.column++;
        }

// @ts-ignore
        p++;
      }

// @ts-ignore
      peg$posDetailsCache[pos] = details;

// @ts-ignore
      return details;
    }
  }

// @ts-ignore
  function peg$computeLocation(startPos, endPos, offset) {
// @ts-ignore
    var startPosDetails = peg$computePosDetails(startPos);
// @ts-ignore
    var endPosDetails = peg$computePosDetails(endPos);

// @ts-ignore
    var res = {
// @ts-ignore
      source: peg$source,
// @ts-ignore
      start: {
// @ts-ignore
        offset: startPos,
// @ts-ignore
        line: startPosDetails.line,
// @ts-ignore
        column: startPosDetails.column
      },
// @ts-ignore
      end: {
// @ts-ignore
        offset: endPos,
// @ts-ignore
        line: endPosDetails.line,
// @ts-ignore
        column: endPosDetails.column
      }
    };
// @ts-ignore
    if (offset && peg$source && (typeof peg$source.offset === "function")) {
// @ts-ignore
      res.start = peg$source.offset(res.start);
// @ts-ignore
      res.end = peg$source.offset(res.end);
    }
// @ts-ignore
    return res;
  }

// @ts-ignore
  function peg$fail(expected) {
// @ts-ignore
    if (peg$currPos < peg$maxFailPos) { return; }

// @ts-ignore
    if (peg$currPos > peg$maxFailPos) {
// @ts-ignore
      peg$maxFailPos = peg$currPos;
// @ts-ignore
      peg$maxFailExpected = [];
    }

// @ts-ignore
    peg$maxFailExpected.push(expected);
  }

// @ts-ignore
  function peg$buildSimpleError(message, location) {
// @ts-ignore
    return new peg$SyntaxError(message, null, null, location);
  }

// @ts-ignore
  function peg$buildStructuredError(expected, found, location) {
// @ts-ignore
    return new peg$SyntaxError(
// @ts-ignore
      peg$SyntaxError.buildMessage(expected, found),
// @ts-ignore
      expected,
// @ts-ignore
      found,
// @ts-ignore
      location
    );
  }

// @ts-ignore
  function // @ts-ignore
peg$parsestart() {
// @ts-ignore
    var s0, s1, s2;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = [];
// @ts-ignore
    s2 = peg$parsedeclaration();
// @ts-ignore
    if (s2 === peg$FAILED) {
// @ts-ignore
      s2 = peg$parsefunction();
// @ts-ignore
      if (s2 === peg$FAILED) {
// @ts-ignore
        s2 = peg$parsetypeDeclaration();
      }
    }
// @ts-ignore
    while (s2 !== peg$FAILED) {
// @ts-ignore
      s1.push(s2);
// @ts-ignore
      s2 = peg$parsedeclaration();
// @ts-ignore
      if (s2 === peg$FAILED) {
// @ts-ignore
        s2 = peg$parsefunction();
// @ts-ignore
        if (s2 === peg$FAILED) {
// @ts-ignore
          s2 = peg$parsetypeDeclaration();
        }
      }
    }
// @ts-ignore
    peg$savedPos = s0;
// @ts-ignore
    s1 = peg$f0(s1);
// @ts-ignore
    s0 = s1;

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsedeclaration() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parse_();
// @ts-ignore
    s2 = peg$parsestandardDeclaration();
// @ts-ignore
    if (s2 !== peg$FAILED) {
// @ts-ignore
      s3 = peg$parse_();
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 59) {
// @ts-ignore
        s4 = peg$c0;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s4 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e0); }
      }
// @ts-ignore
      if (s4 !== peg$FAILED) {
// @ts-ignore
        s5 = peg$parse_();
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f1(s2);
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$currPos;
// @ts-ignore
      s1 = peg$parse_();
// @ts-ignore
      s2 = peg$parseinferredTypeDeclaration();
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        s3 = peg$parse_();
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 59) {
// @ts-ignore
          s4 = peg$c0;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s4 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e0); }
        }
// @ts-ignore
        if (s4 !== peg$FAILED) {
// @ts-ignore
          s5 = peg$parse_();
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s0 = peg$f2(s2);
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsestandardDeclaration() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parse_();
// @ts-ignore
    s2 = peg$parsedeclarationType();
// @ts-ignore
    if (s2 !== peg$FAILED) {
// @ts-ignore
      s3 = peg$parsespc();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parsedeclarationList();
// @ts-ignore
        if (s4 !== peg$FAILED) {
// @ts-ignore
          s5 = peg$parse_();
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s0 = peg$f3(s2, s4);
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsedeclarationType() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (input.substr(peg$currPos, 3) === peg$c1) {
// @ts-ignore
      s0 = peg$c1;
// @ts-ignore
      peg$currPos += 3;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e1); }
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      if (input.substr(peg$currPos, 5) === peg$c2) {
// @ts-ignore
        s0 = peg$c2;
// @ts-ignore
        peg$currPos += 5;
// @ts-ignore
      } else {
// @ts-ignore
        s0 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e2); }
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsedeclarationList() {
// @ts-ignore
    var s0;

// @ts-ignore
    s0 = peg$parsegroupedDeclarationList();
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$parsestandardDeclarationList();
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsegroupedDeclarationList() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parse_();
// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 40) {
// @ts-ignore
      s2 = peg$c3;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s2 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e3); }
    }
// @ts-ignore
    if (s2 !== peg$FAILED) {
// @ts-ignore
      s3 = peg$parse_();
// @ts-ignore
      s4 = [];
// @ts-ignore
      s5 = peg$currPos;
// @ts-ignore
      s6 = peg$parsestandardDeclarationList();
// @ts-ignore
      if (s6 !== peg$FAILED) {
// @ts-ignore
        s7 = peg$parse_();
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 59) {
// @ts-ignore
          s8 = peg$c0;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s8 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e0); }
        }
// @ts-ignore
        if (s8 !== peg$FAILED) {
// @ts-ignore
          s9 = peg$parse_();
// @ts-ignore
          s5 = s6;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s5;
// @ts-ignore
          s5 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s5;
// @ts-ignore
        s5 = peg$FAILED;
      }
// @ts-ignore
      while (s5 !== peg$FAILED) {
// @ts-ignore
        s4.push(s5);
// @ts-ignore
        s5 = peg$currPos;
// @ts-ignore
        s6 = peg$parsestandardDeclarationList();
// @ts-ignore
        if (s6 !== peg$FAILED) {
// @ts-ignore
          s7 = peg$parse_();
// @ts-ignore
          if (input.charCodeAt(peg$currPos) === 59) {
// @ts-ignore
            s8 = peg$c0;
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s8 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e0); }
          }
// @ts-ignore
          if (s8 !== peg$FAILED) {
// @ts-ignore
            s9 = peg$parse_();
// @ts-ignore
            s5 = s6;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s5;
// @ts-ignore
            s5 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s5;
// @ts-ignore
          s5 = peg$FAILED;
        }
      }
// @ts-ignore
      s5 = peg$parse_();
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 41) {
// @ts-ignore
        s6 = peg$c4;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s6 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e4); }
      }
// @ts-ignore
      if (s6 !== peg$FAILED) {
// @ts-ignore
        s7 = peg$parse_();
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f4(s4);
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsestandardDeclarationList() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parse_();
// @ts-ignore
    s2 = peg$parsetypedIdentifierList();
// @ts-ignore
    if (s2 !== peg$FAILED) {
// @ts-ignore
      s3 = peg$parse_();
// @ts-ignore
      s4 = peg$currPos;
// @ts-ignore
      s5 = peg$parse_();
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 61) {
// @ts-ignore
        s6 = peg$c5;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s6 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e5); }
      }
// @ts-ignore
      if (s6 !== peg$FAILED) {
// @ts-ignore
        s7 = peg$parse_();
// @ts-ignore
        s8 = peg$parsevalueList();
// @ts-ignore
        if (s8 !== peg$FAILED) {
// @ts-ignore
          s4 = s8;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s4;
// @ts-ignore
          s4 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s4;
// @ts-ignore
        s4 = peg$FAILED;
      }
// @ts-ignore
      if (s4 === peg$FAILED) {
// @ts-ignore
        s4 = null;
      }
// @ts-ignore
      s5 = peg$parse_();
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f5(s2, s4);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseinferredTypeDeclaration() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parse_();
// @ts-ignore
    s2 = peg$parseidentifierList();
// @ts-ignore
    if (s2 !== peg$FAILED) {
// @ts-ignore
      s3 = peg$parse_();
// @ts-ignore
      if (input.substr(peg$currPos, 2) === peg$c6) {
// @ts-ignore
        s4 = peg$c6;
// @ts-ignore
        peg$currPos += 2;
// @ts-ignore
      } else {
// @ts-ignore
        s4 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e6); }
      }
// @ts-ignore
      if (s4 !== peg$FAILED) {
// @ts-ignore
        s5 = peg$parse_();
// @ts-ignore
        s6 = peg$parsevalueList();
// @ts-ignore
        if (s6 !== peg$FAILED) {
// @ts-ignore
          s7 = peg$parse_();
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s0 = peg$f6(s2, s6);
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsetypedIdentifierList() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseidentifierList();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parsespc();
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        s3 = peg$parseType();
// @ts-ignore
        if (s3 !== peg$FAILED) {
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s0 = peg$f7(s1, s3);
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseidentifierList() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseIdentifier();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = [];
// @ts-ignore
      s3 = peg$currPos;
// @ts-ignore
      s4 = peg$parse_();
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 44) {
// @ts-ignore
        s5 = peg$c7;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s5 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e7); }
      }
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        s6 = peg$parse_();
// @ts-ignore
        s7 = peg$parseIdentifier();
// @ts-ignore
        if (s7 !== peg$FAILED) {
// @ts-ignore
          s3 = s7;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s3;
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
      while (s3 !== peg$FAILED) {
// @ts-ignore
        s2.push(s3);
// @ts-ignore
        s3 = peg$currPos;
// @ts-ignore
        s4 = peg$parse_();
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 44) {
// @ts-ignore
          s5 = peg$c7;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s5 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e7); }
        }
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse_();
// @ts-ignore
          s7 = peg$parseIdentifier();
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s3 = s7;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s3;
// @ts-ignore
            s3 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
      }
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f8(s1, s2);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsevalueList() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseexpression();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = [];
// @ts-ignore
      s3 = peg$currPos;
// @ts-ignore
      s4 = peg$parse_();
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 44) {
// @ts-ignore
        s5 = peg$c7;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s5 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e7); }
      }
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        s6 = peg$parse_();
// @ts-ignore
        s7 = peg$parseexpression();
// @ts-ignore
        if (s7 !== peg$FAILED) {
// @ts-ignore
          s3 = s7;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s3;
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
      while (s3 !== peg$FAILED) {
// @ts-ignore
        s2.push(s3);
// @ts-ignore
        s3 = peg$currPos;
// @ts-ignore
        s4 = peg$parse_();
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 44) {
// @ts-ignore
          s5 = peg$c7;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s5 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e7); }
        }
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse_();
// @ts-ignore
          s7 = peg$parseexpression();
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s3 = s7;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s3;
// @ts-ignore
            s3 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
      }
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f9(s1, s2);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsenamedFunction() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parse_();
// @ts-ignore
    if (input.substr(peg$currPos, 4) === peg$c8) {
// @ts-ignore
      s2 = peg$c8;
// @ts-ignore
      peg$currPos += 4;
// @ts-ignore
    } else {
// @ts-ignore
      s2 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e8); }
    }
// @ts-ignore
    if (s2 !== peg$FAILED) {
// @ts-ignore
      s3 = peg$parsespc();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parseIdentifier();
// @ts-ignore
        if (s4 !== peg$FAILED) {
// @ts-ignore
          s5 = peg$parse_();
// @ts-ignore
          if (input.charCodeAt(peg$currPos) === 40) {
// @ts-ignore
            s6 = peg$c3;
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s6 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e3); }
          }
// @ts-ignore
          if (s6 !== peg$FAILED) {
// @ts-ignore
            s7 = peg$parse_();
// @ts-ignore
            s8 = peg$parseformalsList();
// @ts-ignore
            if (s8 === peg$FAILED) {
// @ts-ignore
              s8 = null;
            }
// @ts-ignore
            s9 = peg$parse_();
// @ts-ignore
            if (input.charCodeAt(peg$currPos) === 41) {
// @ts-ignore
              s10 = peg$c4;
// @ts-ignore
              peg$currPos++;
// @ts-ignore
            } else {
// @ts-ignore
              s10 = peg$FAILED;
// @ts-ignore
              if (peg$silentFails === 0) { peg$fail(peg$e4); }
            }
// @ts-ignore
            if (s10 !== peg$FAILED) {
// @ts-ignore
              s11 = peg$parse_();
// @ts-ignore
              s12 = peg$parseType();
// @ts-ignore
              if (s12 === peg$FAILED) {
// @ts-ignore
                s12 = null;
              }
// @ts-ignore
              s13 = peg$parse_();
// @ts-ignore
              if (input.charCodeAt(peg$currPos) === 123) {
// @ts-ignore
                s14 = peg$c9;
// @ts-ignore
                peg$currPos++;
// @ts-ignore
              } else {
// @ts-ignore
                s14 = peg$FAILED;
// @ts-ignore
                if (peg$silentFails === 0) { peg$fail(peg$e9); }
              }
// @ts-ignore
              if (s14 !== peg$FAILED) {
// @ts-ignore
                s15 = peg$parse_();
// @ts-ignore
                s16 = [];
// @ts-ignore
                s17 = peg$parsestatement();
// @ts-ignore
                while (s17 !== peg$FAILED) {
// @ts-ignore
                  s16.push(s17);
// @ts-ignore
                  s17 = peg$parsestatement();
                }
// @ts-ignore
                s17 = peg$parse_();
// @ts-ignore
                if (input.charCodeAt(peg$currPos) === 125) {
// @ts-ignore
                  s18 = peg$c10;
// @ts-ignore
                  peg$currPos++;
// @ts-ignore
                } else {
// @ts-ignore
                  s18 = peg$FAILED;
// @ts-ignore
                  if (peg$silentFails === 0) { peg$fail(peg$e10); }
                }
// @ts-ignore
                if (s18 !== peg$FAILED) {
// @ts-ignore
                  s19 = peg$parse_();
// @ts-ignore
                  peg$savedPos = s0;
// @ts-ignore
                  s0 = peg$f10(s4, s8, s12, s16);
// @ts-ignore
                } else {
// @ts-ignore
                  peg$currPos = s0;
// @ts-ignore
                  s0 = peg$FAILED;
                }
// @ts-ignore
              } else {
// @ts-ignore
                peg$currPos = s0;
// @ts-ignore
                s0 = peg$FAILED;
              }
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s0;
// @ts-ignore
              s0 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseanonymousFunction() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parse_();
// @ts-ignore
    if (input.substr(peg$currPos, 4) === peg$c8) {
// @ts-ignore
      s2 = peg$c8;
// @ts-ignore
      peg$currPos += 4;
// @ts-ignore
    } else {
// @ts-ignore
      s2 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e8); }
    }
// @ts-ignore
    if (s2 !== peg$FAILED) {
// @ts-ignore
      s3 = peg$parse_();
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 40) {
// @ts-ignore
        s4 = peg$c3;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s4 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e3); }
      }
// @ts-ignore
      if (s4 !== peg$FAILED) {
// @ts-ignore
        s5 = peg$parse_();
// @ts-ignore
        s6 = peg$parseformalsList();
// @ts-ignore
        if (s6 === peg$FAILED) {
// @ts-ignore
          s6 = null;
        }
// @ts-ignore
        s7 = peg$parse_();
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 41) {
// @ts-ignore
          s8 = peg$c4;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s8 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e4); }
        }
// @ts-ignore
        if (s8 !== peg$FAILED) {
// @ts-ignore
          s9 = peg$parse_();
// @ts-ignore
          s10 = peg$parseType();
// @ts-ignore
          if (s10 === peg$FAILED) {
// @ts-ignore
            s10 = null;
          }
// @ts-ignore
          s11 = peg$parse_();
// @ts-ignore
          if (input.charCodeAt(peg$currPos) === 123) {
// @ts-ignore
            s12 = peg$c9;
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s12 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e9); }
          }
// @ts-ignore
          if (s12 !== peg$FAILED) {
// @ts-ignore
            s13 = peg$parse_();
// @ts-ignore
            s14 = [];
// @ts-ignore
            s15 = peg$parsestatement();
// @ts-ignore
            while (s15 !== peg$FAILED) {
// @ts-ignore
              s14.push(s15);
// @ts-ignore
              s15 = peg$parsestatement();
            }
// @ts-ignore
            s15 = peg$parse_();
// @ts-ignore
            if (input.charCodeAt(peg$currPos) === 125) {
// @ts-ignore
              s16 = peg$c10;
// @ts-ignore
              peg$currPos++;
// @ts-ignore
            } else {
// @ts-ignore
              s16 = peg$FAILED;
// @ts-ignore
              if (peg$silentFails === 0) { peg$fail(peg$e10); }
            }
// @ts-ignore
            if (s16 !== peg$FAILED) {
// @ts-ignore
              s17 = peg$parse_();
// @ts-ignore
              peg$savedPos = s0;
// @ts-ignore
              s0 = peg$f11(s6, s10, s14);
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s0;
// @ts-ignore
              s0 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsefunction() {
// @ts-ignore
    var s0;

// @ts-ignore
    s0 = peg$parsenamedFunction();
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$parseanonymousFunction();
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseformalsList() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parsetypedIdentifierList();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = [];
// @ts-ignore
      s3 = peg$currPos;
// @ts-ignore
      s4 = peg$parse_();
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 44) {
// @ts-ignore
        s5 = peg$c7;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s5 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e7); }
      }
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        s6 = peg$parse_();
// @ts-ignore
        s7 = peg$parsetypedIdentifierList();
// @ts-ignore
        if (s7 !== peg$FAILED) {
// @ts-ignore
          s3 = s7;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s3;
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
      while (s3 !== peg$FAILED) {
// @ts-ignore
        s2.push(s3);
// @ts-ignore
        s3 = peg$currPos;
// @ts-ignore
        s4 = peg$parse_();
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 44) {
// @ts-ignore
          s5 = peg$c7;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s5 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e7); }
        }
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse_();
// @ts-ignore
          s7 = peg$parsetypedIdentifierList();
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s3 = s7;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s3;
// @ts-ignore
            s3 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
      }
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f12(s1, s2);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseIdentifier() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$currPos;
// @ts-ignore
    peg$silentFails++;
// @ts-ignore
    s2 = peg$parseGoKeyword();
// @ts-ignore
    peg$silentFails--;
// @ts-ignore
    if (s2 === peg$FAILED) {
// @ts-ignore
      s1 = undefined;
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s1;
// @ts-ignore
      s1 = peg$FAILED;
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseInbuiltType();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        s3 = input.charAt(peg$currPos);
// @ts-ignore
        if (peg$r0.test(s3)) {
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s3 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e11); }
        }
// @ts-ignore
        if (s3 !== peg$FAILED) {
// @ts-ignore
          s4 = [];
// @ts-ignore
          s5 = input.charAt(peg$currPos);
// @ts-ignore
          if (peg$r1.test(s5)) {
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s5 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e12); }
          }
// @ts-ignore
          while (s5 !== peg$FAILED) {
// @ts-ignore
            s4.push(s5);
// @ts-ignore
            s5 = input.charAt(peg$currPos);
// @ts-ignore
            if (peg$r1.test(s5)) {
// @ts-ignore
              peg$currPos++;
// @ts-ignore
            } else {
// @ts-ignore
              s5 = peg$FAILED;
// @ts-ignore
              if (peg$silentFails === 0) { peg$fail(peg$e12); }
            }
          }
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s0 = peg$f13(s3, s4);
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseGoKeyword() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    peg$silentFails++;
// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 5) === peg$c11) {
// @ts-ignore
      s1 = peg$c11;
// @ts-ignore
      peg$currPos += 5;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e14); }
    }
// @ts-ignore
    if (s1 === peg$FAILED) {
// @ts-ignore
      if (input.substr(peg$currPos, 4) === peg$c12) {
// @ts-ignore
        s1 = peg$c12;
// @ts-ignore
        peg$currPos += 4;
// @ts-ignore
      } else {
// @ts-ignore
        s1 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e15); }
      }
// @ts-ignore
      if (s1 === peg$FAILED) {
// @ts-ignore
        if (input.substr(peg$currPos, 4) === peg$c13) {
// @ts-ignore
          s1 = peg$c13;
// @ts-ignore
          peg$currPos += 4;
// @ts-ignore
        } else {
// @ts-ignore
          s1 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e16); }
        }
// @ts-ignore
        if (s1 === peg$FAILED) {
// @ts-ignore
          if (input.substr(peg$currPos, 5) === peg$c2) {
// @ts-ignore
            s1 = peg$c2;
// @ts-ignore
            peg$currPos += 5;
// @ts-ignore
          } else {
// @ts-ignore
            s1 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e2); }
          }
// @ts-ignore
          if (s1 === peg$FAILED) {
// @ts-ignore
            if (input.substr(peg$currPos, 8) === peg$c14) {
// @ts-ignore
              s1 = peg$c14;
// @ts-ignore
              peg$currPos += 8;
// @ts-ignore
            } else {
// @ts-ignore
              s1 = peg$FAILED;
// @ts-ignore
              if (peg$silentFails === 0) { peg$fail(peg$e17); }
            }
// @ts-ignore
            if (s1 === peg$FAILED) {
// @ts-ignore
              if (input.substr(peg$currPos, 7) === peg$c15) {
// @ts-ignore
                s1 = peg$c15;
// @ts-ignore
                peg$currPos += 7;
// @ts-ignore
              } else {
// @ts-ignore
                s1 = peg$FAILED;
// @ts-ignore
                if (peg$silentFails === 0) { peg$fail(peg$e18); }
              }
// @ts-ignore
              if (s1 === peg$FAILED) {
// @ts-ignore
                if (input.substr(peg$currPos, 5) === peg$c16) {
// @ts-ignore
                  s1 = peg$c16;
// @ts-ignore
                  peg$currPos += 5;
// @ts-ignore
                } else {
// @ts-ignore
                  s1 = peg$FAILED;
// @ts-ignore
                  if (peg$silentFails === 0) { peg$fail(peg$e19); }
                }
// @ts-ignore
                if (s1 === peg$FAILED) {
// @ts-ignore
                  if (input.substr(peg$currPos, 4) === peg$c17) {
// @ts-ignore
                    s1 = peg$c17;
// @ts-ignore
                    peg$currPos += 4;
// @ts-ignore
                  } else {
// @ts-ignore
                    s1 = peg$FAILED;
// @ts-ignore
                    if (peg$silentFails === 0) { peg$fail(peg$e20); }
                  }
// @ts-ignore
                  if (s1 === peg$FAILED) {
// @ts-ignore
                    if (input.substr(peg$currPos, 11) === peg$c18) {
// @ts-ignore
                      s1 = peg$c18;
// @ts-ignore
                      peg$currPos += 11;
// @ts-ignore
                    } else {
// @ts-ignore
                      s1 = peg$FAILED;
// @ts-ignore
                      if (peg$silentFails === 0) { peg$fail(peg$e21); }
                    }
// @ts-ignore
                    if (s1 === peg$FAILED) {
// @ts-ignore
                      if (input.substr(peg$currPos, 3) === peg$c19) {
// @ts-ignore
                        s1 = peg$c19;
// @ts-ignore
                        peg$currPos += 3;
// @ts-ignore
                      } else {
// @ts-ignore
                        s1 = peg$FAILED;
// @ts-ignore
                        if (peg$silentFails === 0) { peg$fail(peg$e22); }
                      }
// @ts-ignore
                      if (s1 === peg$FAILED) {
// @ts-ignore
                        if (input.substr(peg$currPos, 4) === peg$c8) {
// @ts-ignore
                          s1 = peg$c8;
// @ts-ignore
                          peg$currPos += 4;
// @ts-ignore
                        } else {
// @ts-ignore
                          s1 = peg$FAILED;
// @ts-ignore
                          if (peg$silentFails === 0) { peg$fail(peg$e8); }
                        }
// @ts-ignore
                        if (s1 === peg$FAILED) {
// @ts-ignore
                          if (input.substr(peg$currPos, 2) === peg$c20) {
// @ts-ignore
                            s1 = peg$c20;
// @ts-ignore
                            peg$currPos += 2;
// @ts-ignore
                          } else {
// @ts-ignore
                            s1 = peg$FAILED;
// @ts-ignore
                            if (peg$silentFails === 0) { peg$fail(peg$e23); }
                          }
// @ts-ignore
                          if (s1 === peg$FAILED) {
// @ts-ignore
                            if (input.substr(peg$currPos, 4) === peg$c21) {
// @ts-ignore
                              s1 = peg$c21;
// @ts-ignore
                              peg$currPos += 4;
// @ts-ignore
                            } else {
// @ts-ignore
                              s1 = peg$FAILED;
// @ts-ignore
                              if (peg$silentFails === 0) { peg$fail(peg$e24); }
                            }
// @ts-ignore
                            if (s1 === peg$FAILED) {
// @ts-ignore
                              if (input.substr(peg$currPos, 2) === peg$c22) {
// @ts-ignore
                                s1 = peg$c22;
// @ts-ignore
                                peg$currPos += 2;
// @ts-ignore
                              } else {
// @ts-ignore
                                s1 = peg$FAILED;
// @ts-ignore
                                if (peg$silentFails === 0) { peg$fail(peg$e25); }
                              }
// @ts-ignore
                              if (s1 === peg$FAILED) {
// @ts-ignore
                                if (input.substr(peg$currPos, 6) === peg$c23) {
// @ts-ignore
                                  s1 = peg$c23;
// @ts-ignore
                                  peg$currPos += 6;
// @ts-ignore
                                } else {
// @ts-ignore
                                  s1 = peg$FAILED;
// @ts-ignore
                                  if (peg$silentFails === 0) { peg$fail(peg$e26); }
                                }
// @ts-ignore
                                if (s1 === peg$FAILED) {
// @ts-ignore
                                  if (input.substr(peg$currPos, 9) === peg$c24) {
// @ts-ignore
                                    s1 = peg$c24;
// @ts-ignore
                                    peg$currPos += 9;
// @ts-ignore
                                  } else {
// @ts-ignore
                                    s1 = peg$FAILED;
// @ts-ignore
                                    if (peg$silentFails === 0) { peg$fail(peg$e27); }
                                  }
// @ts-ignore
                                  if (s1 === peg$FAILED) {
// @ts-ignore
                                    if (input.substr(peg$currPos, 3) === peg$c25) {
// @ts-ignore
                                      s1 = peg$c25;
// @ts-ignore
                                      peg$currPos += 3;
// @ts-ignore
                                    } else {
// @ts-ignore
                                      s1 = peg$FAILED;
// @ts-ignore
                                      if (peg$silentFails === 0) { peg$fail(peg$e28); }
                                    }
// @ts-ignore
                                    if (s1 === peg$FAILED) {
// @ts-ignore
                                      if (input.substr(peg$currPos, 7) === peg$c26) {
// @ts-ignore
                                        s1 = peg$c26;
// @ts-ignore
                                        peg$currPos += 7;
// @ts-ignore
                                      } else {
// @ts-ignore
                                        s1 = peg$FAILED;
// @ts-ignore
                                        if (peg$silentFails === 0) { peg$fail(peg$e29); }
                                      }
// @ts-ignore
                                      if (s1 === peg$FAILED) {
// @ts-ignore
                                        if (input.substr(peg$currPos, 5) === peg$c27) {
// @ts-ignore
                                          s1 = peg$c27;
// @ts-ignore
                                          peg$currPos += 5;
// @ts-ignore
                                        } else {
// @ts-ignore
                                          s1 = peg$FAILED;
// @ts-ignore
                                          if (peg$silentFails === 0) { peg$fail(peg$e30); }
                                        }
// @ts-ignore
                                        if (s1 === peg$FAILED) {
// @ts-ignore
                                          if (input.substr(peg$currPos, 6) === peg$c28) {
// @ts-ignore
                                            s1 = peg$c28;
// @ts-ignore
                                            peg$currPos += 6;
// @ts-ignore
                                          } else {
// @ts-ignore
                                            s1 = peg$FAILED;
// @ts-ignore
                                            if (peg$silentFails === 0) { peg$fail(peg$e31); }
                                          }
// @ts-ignore
                                          if (s1 === peg$FAILED) {
// @ts-ignore
                                            if (input.substr(peg$currPos, 6) === peg$c29) {
// @ts-ignore
                                              s1 = peg$c29;
// @ts-ignore
                                              peg$currPos += 6;
// @ts-ignore
                                            } else {
// @ts-ignore
                                              s1 = peg$FAILED;
// @ts-ignore
                                              if (peg$silentFails === 0) { peg$fail(peg$e32); }
                                            }
// @ts-ignore
                                            if (s1 === peg$FAILED) {
// @ts-ignore
                                              if (input.substr(peg$currPos, 6) === peg$c30) {
// @ts-ignore
                                                s1 = peg$c30;
// @ts-ignore
                                                peg$currPos += 6;
// @ts-ignore
                                              } else {
// @ts-ignore
                                                s1 = peg$FAILED;
// @ts-ignore
                                                if (peg$silentFails === 0) { peg$fail(peg$e33); }
                                              }
// @ts-ignore
                                              if (s1 === peg$FAILED) {
// @ts-ignore
                                                if (input.substr(peg$currPos, 6) === peg$c31) {
// @ts-ignore
                                                  s1 = peg$c31;
// @ts-ignore
                                                  peg$currPos += 6;
// @ts-ignore
                                                } else {
// @ts-ignore
                                                  s1 = peg$FAILED;
// @ts-ignore
                                                  if (peg$silentFails === 0) { peg$fail(peg$e34); }
                                                }
// @ts-ignore
                                                if (s1 === peg$FAILED) {
// @ts-ignore
                                                  if (input.substr(peg$currPos, 4) === peg$c32) {
// @ts-ignore
                                                    s1 = peg$c32;
// @ts-ignore
                                                    peg$currPos += 4;
// @ts-ignore
                                                  } else {
// @ts-ignore
                                                    s1 = peg$FAILED;
// @ts-ignore
                                                    if (peg$silentFails === 0) { peg$fail(peg$e35); }
                                                  }
// @ts-ignore
                                                  if (s1 === peg$FAILED) {
// @ts-ignore
                                                    if (input.substr(peg$currPos, 3) === peg$c1) {
// @ts-ignore
                                                      s1 = peg$c1;
// @ts-ignore
                                                      peg$currPos += 3;
// @ts-ignore
                                                    } else {
// @ts-ignore
                                                      s1 = peg$FAILED;
// @ts-ignore
                                                      if (peg$silentFails === 0) { peg$fail(peg$e1); }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = input.charAt(peg$currPos);
// @ts-ignore
      if (peg$r1.test(s3)) {
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s3 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e12); }
      }
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        s1 = [s1, s2];
// @ts-ignore
        s0 = s1;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }
// @ts-ignore
    peg$silentFails--;
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e13); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseType() {
// @ts-ignore
    var s0, s1;

// @ts-ignore
    peg$silentFails++;
// @ts-ignore
    s0 = peg$parseInbuiltType();
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$parseCustomType();
    }
// @ts-ignore
    peg$silentFails--;
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e36); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseInbuiltType() {
// @ts-ignore
    var s0, s1;

// @ts-ignore
    peg$silentFails++;
// @ts-ignore
    s0 = peg$parseFunctionType();
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$parseTupleType();
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        s0 = peg$parseChanType();
// @ts-ignore
        if (s0 === peg$FAILED) {
// @ts-ignore
          s0 = peg$parseArrayType();
// @ts-ignore
          if (s0 === peg$FAILED) {
// @ts-ignore
            s0 = peg$parseSliceType();
// @ts-ignore
            if (s0 === peg$FAILED) {
// @ts-ignore
              s0 = peg$parseStructType();
// @ts-ignore
              if (s0 === peg$FAILED) {
// @ts-ignore
                s0 = peg$parseBasicType();
              }
            }
          }
        }
      }
    }
// @ts-ignore
    peg$silentFails--;
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e37); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseBasicType() {
// @ts-ignore
    var s0, s1;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 6) === peg$c33) {
// @ts-ignore
      s1 = peg$c33;
// @ts-ignore
      peg$currPos += 6;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e38); }
    }
// @ts-ignore
    if (s1 === peg$FAILED) {
// @ts-ignore
      if (input.substr(peg$currPos, 4) === peg$c34) {
// @ts-ignore
        s1 = peg$c34;
// @ts-ignore
        peg$currPos += 4;
// @ts-ignore
      } else {
// @ts-ignore
        s1 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e39); }
      }
// @ts-ignore
      if (s1 === peg$FAILED) {
// @ts-ignore
        if (input.substr(peg$currPos, 6) === peg$c35) {
// @ts-ignore
          s1 = peg$c35;
// @ts-ignore
          peg$currPos += 6;
// @ts-ignore
        } else {
// @ts-ignore
          s1 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e40); }
        }
// @ts-ignore
        if (s1 === peg$FAILED) {
// @ts-ignore
          if (input.substr(peg$currPos, 4) === peg$c36) {
// @ts-ignore
            s1 = peg$c36;
// @ts-ignore
            peg$currPos += 4;
// @ts-ignore
          } else {
// @ts-ignore
            s1 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e41); }
          }
        }
      }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s1 = peg$f14();
    }
// @ts-ignore
    s0 = s1;

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseTupleType() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parse_();
// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 40) {
// @ts-ignore
      s2 = peg$c3;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s2 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e3); }
    }
// @ts-ignore
    if (s2 !== peg$FAILED) {
// @ts-ignore
      s3 = peg$parse_();
// @ts-ignore
      s4 = peg$parseTypeList();
// @ts-ignore
      if (s4 !== peg$FAILED) {
// @ts-ignore
        s5 = peg$parse_();
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 41) {
// @ts-ignore
          s6 = peg$c4;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s6 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e4); }
        }
// @ts-ignore
        if (s6 !== peg$FAILED) {
// @ts-ignore
          s7 = peg$parse_();
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s0 = peg$f15(s4);
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseTypeList() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parse_();
// @ts-ignore
    s2 = peg$parseType();
// @ts-ignore
    if (s2 !== peg$FAILED) {
// @ts-ignore
      s3 = [];
// @ts-ignore
      s4 = peg$currPos;
// @ts-ignore
      s5 = peg$parse_();
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 44) {
// @ts-ignore
        s6 = peg$c7;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s6 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e7); }
      }
// @ts-ignore
      if (s6 !== peg$FAILED) {
// @ts-ignore
        s7 = peg$parse_();
// @ts-ignore
        s8 = peg$parseType();
// @ts-ignore
        if (s8 !== peg$FAILED) {
// @ts-ignore
          s4 = s8;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s4;
// @ts-ignore
          s4 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s4;
// @ts-ignore
        s4 = peg$FAILED;
      }
// @ts-ignore
      while (s4 !== peg$FAILED) {
// @ts-ignore
        s3.push(s4);
// @ts-ignore
        s4 = peg$currPos;
// @ts-ignore
        s5 = peg$parse_();
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 44) {
// @ts-ignore
          s6 = peg$c7;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s6 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e7); }
        }
// @ts-ignore
        if (s6 !== peg$FAILED) {
// @ts-ignore
          s7 = peg$parse_();
// @ts-ignore
          s8 = peg$parseType();
// @ts-ignore
          if (s8 !== peg$FAILED) {
// @ts-ignore
            s4 = s8;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s4;
// @ts-ignore
            s4 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s4;
// @ts-ignore
          s4 = peg$FAILED;
        }
      }
// @ts-ignore
      s4 = peg$parse_();
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f16(s2, s3);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseFunctionType() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parse_();
// @ts-ignore
    if (input.substr(peg$currPos, 4) === peg$c8) {
// @ts-ignore
      s2 = peg$c8;
// @ts-ignore
      peg$currPos += 4;
// @ts-ignore
    } else {
// @ts-ignore
      s2 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e8); }
    }
// @ts-ignore
    if (s2 !== peg$FAILED) {
// @ts-ignore
      s3 = peg$parseTupleType();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parse_();
// @ts-ignore
        s5 = peg$currPos;
// @ts-ignore
        s6 = peg$parseType();
// @ts-ignore
        if (s6 !== peg$FAILED) {
// @ts-ignore
          s5 = s6;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s5;
// @ts-ignore
          s5 = peg$FAILED;
        }
// @ts-ignore
        if (s5 === peg$FAILED) {
// @ts-ignore
          s5 = null;
        }
// @ts-ignore
        s6 = peg$parse_();
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f17(s3, s5);
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseChanType() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parse_();
// @ts-ignore
    if (input.substr(peg$currPos, 4) === peg$c13) {
// @ts-ignore
      s2 = peg$c13;
// @ts-ignore
      peg$currPos += 4;
// @ts-ignore
    } else {
// @ts-ignore
      s2 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e16); }
    }
// @ts-ignore
    if (s2 === peg$FAILED) {
// @ts-ignore
      if (input.substr(peg$currPos, 6) === peg$c37) {
// @ts-ignore
        s2 = peg$c37;
// @ts-ignore
        peg$currPos += 6;
// @ts-ignore
      } else {
// @ts-ignore
        s2 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e42); }
      }
// @ts-ignore
      if (s2 === peg$FAILED) {
// @ts-ignore
        if (input.substr(peg$currPos, 6) === peg$c38) {
// @ts-ignore
          s2 = peg$c38;
// @ts-ignore
          peg$currPos += 6;
// @ts-ignore
        } else {
// @ts-ignore
          s2 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e43); }
        }
      }
    }
// @ts-ignore
    if (s2 !== peg$FAILED) {
// @ts-ignore
      s3 = peg$parse_();
// @ts-ignore
      s4 = peg$currPos;
// @ts-ignore
      s5 = peg$parseType();
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        s4 = s5;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s4;
// @ts-ignore
        s4 = peg$FAILED;
      }
// @ts-ignore
      if (s4 === peg$FAILED) {
// @ts-ignore
        s4 = null;
      }
// @ts-ignore
      s5 = peg$parse_();
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f18(s2, s4);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseSliceType() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parse_();
// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 91) {
// @ts-ignore
      s2 = peg$c39;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s2 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e44); }
    }
// @ts-ignore
    if (s2 !== peg$FAILED) {
// @ts-ignore
      s3 = peg$parse_();
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 93) {
// @ts-ignore
        s4 = peg$c40;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s4 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e45); }
      }
// @ts-ignore
      if (s4 !== peg$FAILED) {
// @ts-ignore
        s5 = peg$parseType();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s0 = peg$f19(s5);
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseArrayType() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parse_();
// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 91) {
// @ts-ignore
      s2 = peg$c39;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s2 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e44); }
    }
// @ts-ignore
    if (s2 !== peg$FAILED) {
// @ts-ignore
      s3 = peg$parse_();
// @ts-ignore
      s4 = peg$currPos;
// @ts-ignore
      s5 = [];
// @ts-ignore
      s6 = input.charAt(peg$currPos);
// @ts-ignore
      if (peg$r2.test(s6)) {
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s6 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e46); }
      }
// @ts-ignore
      if (s6 !== peg$FAILED) {
// @ts-ignore
        while (s6 !== peg$FAILED) {
// @ts-ignore
          s5.push(s6);
// @ts-ignore
          s6 = input.charAt(peg$currPos);
// @ts-ignore
          if (peg$r2.test(s6)) {
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s6 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e46); }
          }
        }
// @ts-ignore
      } else {
// @ts-ignore
        s5 = peg$FAILED;
      }
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        s4 = s5;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s4;
// @ts-ignore
        s4 = peg$FAILED;
      }
// @ts-ignore
      if (s4 !== peg$FAILED) {
// @ts-ignore
        s5 = peg$parse_();
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 93) {
// @ts-ignore
          s6 = peg$c40;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s6 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e45); }
        }
// @ts-ignore
        if (s6 !== peg$FAILED) {
// @ts-ignore
          s7 = peg$parseType();
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            peg$savedPos = s0;
// @ts-ignore
            s0 = peg$f20(s4, s7);
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsestructElement() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parse_();
// @ts-ignore
    s2 = peg$parseIdentifier();
// @ts-ignore
    if (s2 !== peg$FAILED) {
// @ts-ignore
      s3 = peg$parsespc();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parseType();
// @ts-ignore
        if (s4 !== peg$FAILED) {
// @ts-ignore
          s5 = peg$parse_();
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s0 = peg$f21(s2, s4);
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseStructType() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parse_();
// @ts-ignore
    if (input.substr(peg$currPos, 6) === peg$c30) {
// @ts-ignore
      s2 = peg$c30;
// @ts-ignore
      peg$currPos += 6;
// @ts-ignore
    } else {
// @ts-ignore
      s2 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e33); }
    }
// @ts-ignore
    if (s2 !== peg$FAILED) {
// @ts-ignore
      s3 = peg$parse_();
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 123) {
// @ts-ignore
        s4 = peg$c9;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s4 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e9); }
      }
// @ts-ignore
      if (s4 !== peg$FAILED) {
// @ts-ignore
        s5 = peg$parse_();
// @ts-ignore
        s6 = [];
// @ts-ignore
        s7 = peg$currPos;
// @ts-ignore
        s8 = peg$parse_();
// @ts-ignore
        s9 = peg$parsestructElement();
// @ts-ignore
        if (s9 !== peg$FAILED) {
// @ts-ignore
          s10 = peg$parse_();
// @ts-ignore
          if (input.charCodeAt(peg$currPos) === 59) {
// @ts-ignore
            s11 = peg$c0;
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s11 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e0); }
          }
// @ts-ignore
          if (s11 !== peg$FAILED) {
// @ts-ignore
            s12 = peg$parse_();
// @ts-ignore
            s7 = s9;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s7;
// @ts-ignore
            s7 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s7;
// @ts-ignore
          s7 = peg$FAILED;
        }
// @ts-ignore
        while (s7 !== peg$FAILED) {
// @ts-ignore
          s6.push(s7);
// @ts-ignore
          s7 = peg$currPos;
// @ts-ignore
          s8 = peg$parse_();
// @ts-ignore
          s9 = peg$parsestructElement();
// @ts-ignore
          if (s9 !== peg$FAILED) {
// @ts-ignore
            s10 = peg$parse_();
// @ts-ignore
            if (input.charCodeAt(peg$currPos) === 59) {
// @ts-ignore
              s11 = peg$c0;
// @ts-ignore
              peg$currPos++;
// @ts-ignore
            } else {
// @ts-ignore
              s11 = peg$FAILED;
// @ts-ignore
              if (peg$silentFails === 0) { peg$fail(peg$e0); }
            }
// @ts-ignore
            if (s11 !== peg$FAILED) {
// @ts-ignore
              s12 = peg$parse_();
// @ts-ignore
              s7 = s9;
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s7;
// @ts-ignore
              s7 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s7;
// @ts-ignore
            s7 = peg$FAILED;
          }
        }
// @ts-ignore
        s7 = peg$parse_();
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 125) {
// @ts-ignore
          s8 = peg$c10;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s8 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e10); }
        }
// @ts-ignore
        if (s8 !== peg$FAILED) {
// @ts-ignore
          s9 = peg$parse_();
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s0 = peg$f22(s6);
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseCustomType() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$currPos;
// @ts-ignore
    peg$silentFails++;
// @ts-ignore
    s2 = peg$parseGoKeyword();
// @ts-ignore
    peg$silentFails--;
// @ts-ignore
    if (s2 === peg$FAILED) {
// @ts-ignore
      s1 = undefined;
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s1;
// @ts-ignore
      s1 = peg$FAILED;
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      s3 = peg$parseInbuiltType();
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        s2 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        s3 = input.charAt(peg$currPos);
// @ts-ignore
        if (peg$r0.test(s3)) {
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s3 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e11); }
        }
// @ts-ignore
        if (s3 !== peg$FAILED) {
// @ts-ignore
          s4 = [];
// @ts-ignore
          s5 = input.charAt(peg$currPos);
// @ts-ignore
          if (peg$r1.test(s5)) {
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s5 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e12); }
          }
// @ts-ignore
          while (s5 !== peg$FAILED) {
// @ts-ignore
            s4.push(s5);
// @ts-ignore
            s5 = input.charAt(peg$currPos);
// @ts-ignore
            if (peg$r1.test(s5)) {
// @ts-ignore
              peg$currPos++;
// @ts-ignore
            } else {
// @ts-ignore
              s5 = peg$FAILED;
// @ts-ignore
              if (peg$silentFails === 0) { peg$fail(peg$e12); }
            }
          }
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s0 = peg$f23(s3, s4);
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseStructFieldInstantiation() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseIdentifier();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse_();
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 58) {
// @ts-ignore
        s3 = peg$c41;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s3 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e47); }
      }
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parse_();
// @ts-ignore
        s5 = peg$parseexpression();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s0 = peg$f24(s1, s5);
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseStructFieldInstantiationList() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseStructFieldInstantiation();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = [];
// @ts-ignore
      s3 = peg$currPos;
// @ts-ignore
      s4 = peg$parse_();
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 44) {
// @ts-ignore
        s5 = peg$c7;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s5 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e7); }
      }
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        s6 = peg$parse_();
// @ts-ignore
        s7 = peg$parseStructFieldInstantiation();
// @ts-ignore
        if (s7 !== peg$FAILED) {
// @ts-ignore
          s3 = s7;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s3;
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
      while (s3 !== peg$FAILED) {
// @ts-ignore
        s2.push(s3);
// @ts-ignore
        s3 = peg$currPos;
// @ts-ignore
        s4 = peg$parse_();
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 44) {
// @ts-ignore
          s5 = peg$c7;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s5 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e7); }
        }
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse_();
// @ts-ignore
          s7 = peg$parseStructFieldInstantiation();
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s3 = s7;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s3;
// @ts-ignore
            s3 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
      }
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f25(s1, s2);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseStructLiteral() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parse_();
// @ts-ignore
    s2 = peg$parseStructType();
// @ts-ignore
    if (s2 === peg$FAILED) {
// @ts-ignore
      s2 = peg$parseCustomType();
    }
// @ts-ignore
    if (s2 !== peg$FAILED) {
// @ts-ignore
      s3 = peg$parse_();
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 123) {
// @ts-ignore
        s4 = peg$c9;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s4 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e9); }
      }
// @ts-ignore
      if (s4 !== peg$FAILED) {
// @ts-ignore
        s5 = peg$parse_();
// @ts-ignore
        s6 = peg$parseStructFieldInstantiationList();
// @ts-ignore
        if (s6 === peg$FAILED) {
// @ts-ignore
          s6 = null;
        }
// @ts-ignore
        s7 = peg$parse_();
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 125) {
// @ts-ignore
          s8 = peg$c10;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s8 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e10); }
        }
// @ts-ignore
        if (s8 !== peg$FAILED) {
// @ts-ignore
          s9 = peg$parse_();
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s0 = peg$f26(s2, s6);
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseIndexExpression() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parse_();
// @ts-ignore
    s2 = peg$parseoperableExpression();
// @ts-ignore
    if (s2 !== peg$FAILED) {
// @ts-ignore
      s3 = peg$parse_();
// @ts-ignore
      s4 = [];
// @ts-ignore
      s5 = peg$currPos;
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 91) {
// @ts-ignore
        s6 = peg$c39;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s6 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e44); }
      }
// @ts-ignore
      if (s6 !== peg$FAILED) {
// @ts-ignore
        s7 = peg$parse_();
// @ts-ignore
        s8 = peg$parselogical_binop();
// @ts-ignore
        if (s8 === peg$FAILED) {
// @ts-ignore
          s8 = peg$parseunop();
        }
// @ts-ignore
        if (s8 !== peg$FAILED) {
// @ts-ignore
          s9 = peg$parse_();
// @ts-ignore
          if (input.charCodeAt(peg$currPos) === 93) {
// @ts-ignore
            s10 = peg$c40;
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s10 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e45); }
          }
// @ts-ignore
          if (s10 !== peg$FAILED) {
// @ts-ignore
            s5 = s8;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s5;
// @ts-ignore
            s5 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s5;
// @ts-ignore
          s5 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s5;
// @ts-ignore
        s5 = peg$FAILED;
      }
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        while (s5 !== peg$FAILED) {
// @ts-ignore
          s4.push(s5);
// @ts-ignore
          s5 = peg$currPos;
// @ts-ignore
          if (input.charCodeAt(peg$currPos) === 91) {
// @ts-ignore
            s6 = peg$c39;
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s6 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e44); }
          }
// @ts-ignore
          if (s6 !== peg$FAILED) {
// @ts-ignore
            s7 = peg$parse_();
// @ts-ignore
            s8 = peg$parselogical_binop();
// @ts-ignore
            if (s8 === peg$FAILED) {
// @ts-ignore
              s8 = peg$parseunop();
            }
// @ts-ignore
            if (s8 !== peg$FAILED) {
// @ts-ignore
              s9 = peg$parse_();
// @ts-ignore
              if (input.charCodeAt(peg$currPos) === 93) {
// @ts-ignore
                s10 = peg$c40;
// @ts-ignore
                peg$currPos++;
// @ts-ignore
              } else {
// @ts-ignore
                s10 = peg$FAILED;
// @ts-ignore
                if (peg$silentFails === 0) { peg$fail(peg$e45); }
              }
// @ts-ignore
              if (s10 !== peg$FAILED) {
// @ts-ignore
                s5 = s8;
// @ts-ignore
              } else {
// @ts-ignore
                peg$currPos = s5;
// @ts-ignore
                s5 = peg$FAILED;
              }
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s5;
// @ts-ignore
              s5 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s5;
// @ts-ignore
            s5 = peg$FAILED;
          }
        }
// @ts-ignore
      } else {
// @ts-ignore
        s4 = peg$FAILED;
      }
// @ts-ignore
      if (s4 !== peg$FAILED) {
// @ts-ignore
        s5 = peg$parse_();
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f27(s2, s4);
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseStructField() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parse_();
// @ts-ignore
    s2 = peg$parseoperableExpression();
// @ts-ignore
    if (s2 !== peg$FAILED) {
// @ts-ignore
      s3 = peg$parse_();
// @ts-ignore
      s4 = [];
// @ts-ignore
      s5 = peg$currPos;
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 46) {
// @ts-ignore
        s6 = peg$c42;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s6 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e48); }
      }
// @ts-ignore
      if (s6 !== peg$FAILED) {
// @ts-ignore
        s7 = peg$parseIdentifier();
// @ts-ignore
        if (s7 !== peg$FAILED) {
// @ts-ignore
          s5 = s7;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s5;
// @ts-ignore
          s5 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s5;
// @ts-ignore
        s5 = peg$FAILED;
      }
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        while (s5 !== peg$FAILED) {
// @ts-ignore
          s4.push(s5);
// @ts-ignore
          s5 = peg$currPos;
// @ts-ignore
          if (input.charCodeAt(peg$currPos) === 46) {
// @ts-ignore
            s6 = peg$c42;
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s6 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e48); }
          }
// @ts-ignore
          if (s6 !== peg$FAILED) {
// @ts-ignore
            s7 = peg$parseIdentifier();
// @ts-ignore
            if (s7 !== peg$FAILED) {
// @ts-ignore
              s5 = s7;
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s5;
// @ts-ignore
              s5 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s5;
// @ts-ignore
            s5 = peg$FAILED;
          }
        }
// @ts-ignore
      } else {
// @ts-ignore
        s4 = peg$FAILED;
      }
// @ts-ignore
      if (s4 !== peg$FAILED) {
// @ts-ignore
        s5 = peg$parse_();
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f28(s2, s4);
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseapplicationValueList() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseexpression();
// @ts-ignore
    if (s1 === peg$FAILED) {
// @ts-ignore
      s1 = peg$parseType();
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = [];
// @ts-ignore
      s3 = peg$currPos;
// @ts-ignore
      s4 = peg$parse_();
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 44) {
// @ts-ignore
        s5 = peg$c7;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s5 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e7); }
      }
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        s6 = peg$parse_();
// @ts-ignore
        s7 = peg$parseexpression();
// @ts-ignore
        if (s7 === peg$FAILED) {
// @ts-ignore
          s7 = peg$parseType();
        }
// @ts-ignore
        if (s7 !== peg$FAILED) {
// @ts-ignore
          s3 = s7;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s3;
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
      while (s3 !== peg$FAILED) {
// @ts-ignore
        s2.push(s3);
// @ts-ignore
        s3 = peg$currPos;
// @ts-ignore
        s4 = peg$parse_();
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 44) {
// @ts-ignore
          s5 = peg$c7;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s5 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e7); }
        }
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse_();
// @ts-ignore
          s7 = peg$parseexpression();
// @ts-ignore
          if (s7 === peg$FAILED) {
// @ts-ignore
            s7 = peg$parseType();
          }
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s3 = s7;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s3;
// @ts-ignore
            s3 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
      }
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f29(s1, s2);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseapplicationOrIndexOrAccessExpression() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parse_();
// @ts-ignore
    s2 = peg$parseoperableExpression();
// @ts-ignore
    if (s2 !== peg$FAILED) {
// @ts-ignore
      s3 = peg$parse_();
// @ts-ignore
      s4 = [];
// @ts-ignore
      s5 = peg$currPos;
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 91) {
// @ts-ignore
        s6 = peg$c39;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s6 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e44); }
      }
// @ts-ignore
      if (s6 !== peg$FAILED) {
// @ts-ignore
        s7 = peg$parse_();
// @ts-ignore
        s8 = [];
// @ts-ignore
        s9 = input.charAt(peg$currPos);
// @ts-ignore
        if (peg$r2.test(s9)) {
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s9 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e46); }
        }
// @ts-ignore
        if (s9 !== peg$FAILED) {
// @ts-ignore
          while (s9 !== peg$FAILED) {
// @ts-ignore
            s8.push(s9);
// @ts-ignore
            s9 = input.charAt(peg$currPos);
// @ts-ignore
            if (peg$r2.test(s9)) {
// @ts-ignore
              peg$currPos++;
// @ts-ignore
            } else {
// @ts-ignore
              s9 = peg$FAILED;
// @ts-ignore
              if (peg$silentFails === 0) { peg$fail(peg$e46); }
            }
          }
// @ts-ignore
        } else {
// @ts-ignore
          s8 = peg$FAILED;
        }
// @ts-ignore
        if (s8 === peg$FAILED) {
// @ts-ignore
          s8 = peg$parseIdentifier();
        }
// @ts-ignore
        if (s8 !== peg$FAILED) {
// @ts-ignore
          s9 = peg$parse_();
// @ts-ignore
          if (input.charCodeAt(peg$currPos) === 93) {
// @ts-ignore
            s10 = peg$c40;
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s10 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e45); }
          }
// @ts-ignore
          if (s10 !== peg$FAILED) {
// @ts-ignore
            s5 = [ s6, s8 ];
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s5;
// @ts-ignore
            s5 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s5;
// @ts-ignore
          s5 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s5;
// @ts-ignore
        s5 = peg$FAILED;
      }
// @ts-ignore
      if (s5 === peg$FAILED) {
// @ts-ignore
        s5 = peg$currPos;
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 40) {
// @ts-ignore
          s6 = peg$c3;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s6 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e3); }
        }
// @ts-ignore
        if (s6 !== peg$FAILED) {
// @ts-ignore
          s7 = peg$parse_();
// @ts-ignore
          s8 = peg$parseapplicationValueList();
// @ts-ignore
          if (s8 === peg$FAILED) {
// @ts-ignore
            s8 = null;
          }
// @ts-ignore
          s9 = peg$parse_();
// @ts-ignore
          if (input.charCodeAt(peg$currPos) === 41) {
// @ts-ignore
            s10 = peg$c4;
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s10 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e4); }
          }
// @ts-ignore
          if (s10 !== peg$FAILED) {
// @ts-ignore
            s5 = [ s6, s8 ];
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s5;
// @ts-ignore
            s5 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s5;
// @ts-ignore
          s5 = peg$FAILED;
        }
// @ts-ignore
        if (s5 === peg$FAILED) {
// @ts-ignore
          s5 = peg$currPos;
// @ts-ignore
          if (input.charCodeAt(peg$currPos) === 46) {
// @ts-ignore
            s6 = peg$c42;
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s6 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e48); }
          }
// @ts-ignore
          if (s6 !== peg$FAILED) {
// @ts-ignore
            s7 = peg$parseIdentifier();
// @ts-ignore
            if (s7 !== peg$FAILED) {
// @ts-ignore
              s5 = [ s6, s7 ];
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s5;
// @ts-ignore
              s5 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s5;
// @ts-ignore
            s5 = peg$FAILED;
          }
        }
      }
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        while (s5 !== peg$FAILED) {
// @ts-ignore
          s4.push(s5);
// @ts-ignore
          s5 = peg$currPos;
// @ts-ignore
          if (input.charCodeAt(peg$currPos) === 91) {
// @ts-ignore
            s6 = peg$c39;
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s6 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e44); }
          }
// @ts-ignore
          if (s6 !== peg$FAILED) {
// @ts-ignore
            s7 = peg$parse_();
// @ts-ignore
            s8 = [];
// @ts-ignore
            s9 = input.charAt(peg$currPos);
// @ts-ignore
            if (peg$r2.test(s9)) {
// @ts-ignore
              peg$currPos++;
// @ts-ignore
            } else {
// @ts-ignore
              s9 = peg$FAILED;
// @ts-ignore
              if (peg$silentFails === 0) { peg$fail(peg$e46); }
            }
// @ts-ignore
            if (s9 !== peg$FAILED) {
// @ts-ignore
              while (s9 !== peg$FAILED) {
// @ts-ignore
                s8.push(s9);
// @ts-ignore
                s9 = input.charAt(peg$currPos);
// @ts-ignore
                if (peg$r2.test(s9)) {
// @ts-ignore
                  peg$currPos++;
// @ts-ignore
                } else {
// @ts-ignore
                  s9 = peg$FAILED;
// @ts-ignore
                  if (peg$silentFails === 0) { peg$fail(peg$e46); }
                }
              }
// @ts-ignore
            } else {
// @ts-ignore
              s8 = peg$FAILED;
            }
// @ts-ignore
            if (s8 === peg$FAILED) {
// @ts-ignore
              s8 = peg$parseIdentifier();
            }
// @ts-ignore
            if (s8 !== peg$FAILED) {
// @ts-ignore
              s9 = peg$parse_();
// @ts-ignore
              if (input.charCodeAt(peg$currPos) === 93) {
// @ts-ignore
                s10 = peg$c40;
// @ts-ignore
                peg$currPos++;
// @ts-ignore
              } else {
// @ts-ignore
                s10 = peg$FAILED;
// @ts-ignore
                if (peg$silentFails === 0) { peg$fail(peg$e45); }
              }
// @ts-ignore
              if (s10 !== peg$FAILED) {
// @ts-ignore
                s5 = [ s6, s8 ];
// @ts-ignore
              } else {
// @ts-ignore
                peg$currPos = s5;
// @ts-ignore
                s5 = peg$FAILED;
              }
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s5;
// @ts-ignore
              s5 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s5;
// @ts-ignore
            s5 = peg$FAILED;
          }
// @ts-ignore
          if (s5 === peg$FAILED) {
// @ts-ignore
            s5 = peg$currPos;
// @ts-ignore
            if (input.charCodeAt(peg$currPos) === 40) {
// @ts-ignore
              s6 = peg$c3;
// @ts-ignore
              peg$currPos++;
// @ts-ignore
            } else {
// @ts-ignore
              s6 = peg$FAILED;
// @ts-ignore
              if (peg$silentFails === 0) { peg$fail(peg$e3); }
            }
// @ts-ignore
            if (s6 !== peg$FAILED) {
// @ts-ignore
              s7 = peg$parse_();
// @ts-ignore
              s8 = peg$parseapplicationValueList();
// @ts-ignore
              if (s8 === peg$FAILED) {
// @ts-ignore
                s8 = null;
              }
// @ts-ignore
              s9 = peg$parse_();
// @ts-ignore
              if (input.charCodeAt(peg$currPos) === 41) {
// @ts-ignore
                s10 = peg$c4;
// @ts-ignore
                peg$currPos++;
// @ts-ignore
              } else {
// @ts-ignore
                s10 = peg$FAILED;
// @ts-ignore
                if (peg$silentFails === 0) { peg$fail(peg$e4); }
              }
// @ts-ignore
              if (s10 !== peg$FAILED) {
// @ts-ignore
                s5 = [ s6, s8 ];
// @ts-ignore
              } else {
// @ts-ignore
                peg$currPos = s5;
// @ts-ignore
                s5 = peg$FAILED;
              }
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s5;
// @ts-ignore
              s5 = peg$FAILED;
            }
// @ts-ignore
            if (s5 === peg$FAILED) {
// @ts-ignore
              s5 = peg$currPos;
// @ts-ignore
              if (input.charCodeAt(peg$currPos) === 46) {
// @ts-ignore
                s6 = peg$c42;
// @ts-ignore
                peg$currPos++;
// @ts-ignore
              } else {
// @ts-ignore
                s6 = peg$FAILED;
// @ts-ignore
                if (peg$silentFails === 0) { peg$fail(peg$e48); }
              }
// @ts-ignore
              if (s6 !== peg$FAILED) {
// @ts-ignore
                s7 = peg$parseIdentifier();
// @ts-ignore
                if (s7 !== peg$FAILED) {
// @ts-ignore
                  s5 = [ s6, s7 ];
// @ts-ignore
                } else {
// @ts-ignore
                  peg$currPos = s5;
// @ts-ignore
                  s5 = peg$FAILED;
                }
// @ts-ignore
              } else {
// @ts-ignore
                peg$currPos = s5;
// @ts-ignore
                s5 = peg$FAILED;
              }
            }
          }
        }
// @ts-ignore
      } else {
// @ts-ignore
        s4 = peg$FAILED;
      }
// @ts-ignore
      if (s4 !== peg$FAILED) {
// @ts-ignore
        s5 = peg$parse_();
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f30(s2, s4);
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseoperableExpression() {
// @ts-ignore
    var s0;

// @ts-ignore
    s0 = peg$parseunop();
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$parseanonymousFunction();
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        s0 = peg$parseliteral();
// @ts-ignore
        if (s0 === peg$FAILED) {
// @ts-ignore
          s0 = peg$parseStructLiteral();
// @ts-ignore
          if (s0 === peg$FAILED) {
// @ts-ignore
            s0 = peg$parseIdentifier();
          }
        }
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseexpression() {
// @ts-ignore
    var s0;

// @ts-ignore
    s0 = peg$parselogical_binop();
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$parseunop();
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        s0 = peg$parseapplicationOrIndexOrAccessExpression();
// @ts-ignore
        if (s0 === peg$FAILED) {
// @ts-ignore
          s0 = peg$parseanonymousFunction();
// @ts-ignore
          if (s0 === peg$FAILED) {
// @ts-ignore
            s0 = peg$parseStructLiteral();
// @ts-ignore
            if (s0 === peg$FAILED) {
// @ts-ignore
              s0 = peg$parseliteral();
// @ts-ignore
              if (s0 === peg$FAILED) {
// @ts-ignore
                s0 = peg$parseIdentifier();
              }
            }
          }
        }
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseunaryOperatorValidExpressions() {
// @ts-ignore
    var s0;

// @ts-ignore
    s0 = peg$parseapplicationOrIndexOrAccessExpression();
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$parseanonymousFunction();
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        s0 = peg$parsefactor();
// @ts-ignore
        if (s0 === peg$FAILED) {
// @ts-ignore
          s0 = peg$parseStructLiteral();
// @ts-ignore
          if (s0 === peg$FAILED) {
// @ts-ignore
            s0 = peg$parseliteral();
// @ts-ignore
            if (s0 === peg$FAILED) {
// @ts-ignore
              s0 = peg$parseIdentifier();
            }
          }
        }
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsenonBinaryOperatorExpression() {
// @ts-ignore
    var s0;

// @ts-ignore
    s0 = peg$parseapplicationOrIndexOrAccessExpression();
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$parseunop();
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        s0 = peg$parseanonymousFunction();
// @ts-ignore
        if (s0 === peg$FAILED) {
// @ts-ignore
          s0 = peg$parseStructLiteral();
// @ts-ignore
          if (s0 === peg$FAILED) {
// @ts-ignore
            s0 = peg$parseliteral();
// @ts-ignore
            if (s0 === peg$FAILED) {
// @ts-ignore
              s0 = peg$parseIdentifier();
            }
          }
        }
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseliteral() {
// @ts-ignore
    var s0, s1;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parsenumber();
// @ts-ignore
    if (s1 === peg$FAILED) {
// @ts-ignore
      s1 = peg$parsebool();
// @ts-ignore
      if (s1 === peg$FAILED) {
// @ts-ignore
        s1 = peg$parsestring();
      }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s1 = peg$f31(s1);
    }
// @ts-ignore
    s0 = s1;

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsenumber() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = [];
// @ts-ignore
    s2 = input.charAt(peg$currPos);
// @ts-ignore
    if (peg$r2.test(s2)) {
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s2 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e46); }
    }
// @ts-ignore
    if (s2 !== peg$FAILED) {
// @ts-ignore
      while (s2 !== peg$FAILED) {
// @ts-ignore
        s1.push(s2);
// @ts-ignore
        s2 = input.charAt(peg$currPos);
// @ts-ignore
        if (peg$r2.test(s2)) {
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s2 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e46); }
        }
      }
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 46) {
// @ts-ignore
        s3 = peg$c42;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s3 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e48); }
      }
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = [];
// @ts-ignore
        s5 = input.charAt(peg$currPos);
// @ts-ignore
        if (peg$r2.test(s5)) {
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s5 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e46); }
        }
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          while (s5 !== peg$FAILED) {
// @ts-ignore
            s4.push(s5);
// @ts-ignore
            s5 = input.charAt(peg$currPos);
// @ts-ignore
            if (peg$r2.test(s5)) {
// @ts-ignore
              peg$currPos++;
// @ts-ignore
            } else {
// @ts-ignore
              s5 = peg$FAILED;
// @ts-ignore
              if (peg$silentFails === 0) { peg$fail(peg$e46); }
            }
          }
// @ts-ignore
        } else {
// @ts-ignore
          s4 = peg$FAILED;
        }
// @ts-ignore
        if (s4 !== peg$FAILED) {
// @ts-ignore
          s2 = s4;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s2;
// @ts-ignore
          s2 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
      }
// @ts-ignore
      if (s2 === peg$FAILED) {
// @ts-ignore
        s2 = null;
      }
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f32(s1, s2);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsebool() {
// @ts-ignore
    var s0, s1;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 4) === peg$c43) {
// @ts-ignore
      s1 = peg$c43;
// @ts-ignore
      peg$currPos += 4;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e49); }
    }
// @ts-ignore
    if (s1 === peg$FAILED) {
// @ts-ignore
      if (input.substr(peg$currPos, 5) === peg$c44) {
// @ts-ignore
        s1 = peg$c44;
// @ts-ignore
        peg$currPos += 5;
// @ts-ignore
      } else {
// @ts-ignore
        s1 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e50); }
      }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s1 = peg$f33(s1);
    }
// @ts-ignore
    s0 = s1;

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsestring() {
// @ts-ignore
    var s0, s1, s2, s3, s4;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$currPos;
// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 34) {
// @ts-ignore
      s2 = peg$c45;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s2 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e51); }
    }
// @ts-ignore
    if (s2 !== peg$FAILED) {
// @ts-ignore
      s3 = [];
// @ts-ignore
      s4 = input.charAt(peg$currPos);
// @ts-ignore
      if (peg$r3.test(s4)) {
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s4 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e52); }
      }
// @ts-ignore
      while (s4 !== peg$FAILED) {
// @ts-ignore
        s3.push(s4);
// @ts-ignore
        s4 = input.charAt(peg$currPos);
// @ts-ignore
        if (peg$r3.test(s4)) {
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s4 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e52); }
        }
      }
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 34) {
// @ts-ignore
        s4 = peg$c45;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s4 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e51); }
      }
// @ts-ignore
      if (s4 !== peg$FAILED) {
// @ts-ignore
        s1 = s3;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s1;
// @ts-ignore
        s1 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s1;
// @ts-ignore
      s1 = peg$FAILED;
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s1 = peg$f34(s1);
    }
// @ts-ignore
    s0 = s1;

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parselogical_binop() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parse_();
// @ts-ignore
    s2 = peg$parsecomparative_binop();
// @ts-ignore
    if (s2 !== peg$FAILED) {
// @ts-ignore
      s3 = peg$parse_();
// @ts-ignore
      s4 = [];
// @ts-ignore
      s5 = peg$currPos;
// @ts-ignore
      s6 = peg$parse_();
// @ts-ignore
      if (input.substr(peg$currPos, 2) === peg$c46) {
// @ts-ignore
        s7 = peg$c46;
// @ts-ignore
        peg$currPos += 2;
// @ts-ignore
      } else {
// @ts-ignore
        s7 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e53); }
      }
// @ts-ignore
      if (s7 === peg$FAILED) {
// @ts-ignore
        if (input.substr(peg$currPos, 2) === peg$c47) {
// @ts-ignore
          s7 = peg$c47;
// @ts-ignore
          peg$currPos += 2;
// @ts-ignore
        } else {
// @ts-ignore
          s7 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e54); }
        }
      }
// @ts-ignore
      if (s7 !== peg$FAILED) {
// @ts-ignore
        s8 = peg$parse_();
// @ts-ignore
        s9 = peg$parsecomparative_binop();
// @ts-ignore
        if (s9 !== peg$FAILED) {
// @ts-ignore
          s5 = [ s7, s9 ];
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s5;
// @ts-ignore
          s5 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s5;
// @ts-ignore
        s5 = peg$FAILED;
      }
// @ts-ignore
      while (s5 !== peg$FAILED) {
// @ts-ignore
        s4.push(s5);
// @ts-ignore
        s5 = peg$currPos;
// @ts-ignore
        s6 = peg$parse_();
// @ts-ignore
        if (input.substr(peg$currPos, 2) === peg$c46) {
// @ts-ignore
          s7 = peg$c46;
// @ts-ignore
          peg$currPos += 2;
// @ts-ignore
        } else {
// @ts-ignore
          s7 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e53); }
        }
// @ts-ignore
        if (s7 === peg$FAILED) {
// @ts-ignore
          if (input.substr(peg$currPos, 2) === peg$c47) {
// @ts-ignore
            s7 = peg$c47;
// @ts-ignore
            peg$currPos += 2;
// @ts-ignore
          } else {
// @ts-ignore
            s7 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e54); }
          }
        }
// @ts-ignore
        if (s7 !== peg$FAILED) {
// @ts-ignore
          s8 = peg$parse_();
// @ts-ignore
          s9 = peg$parsecomparative_binop();
// @ts-ignore
          if (s9 !== peg$FAILED) {
// @ts-ignore
            s5 = [ s7, s9 ];
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s5;
// @ts-ignore
            s5 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s5;
// @ts-ignore
          s5 = peg$FAILED;
        }
      }
// @ts-ignore
      s5 = peg$parse_();
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f35(s2, s4);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsecomparative_binop() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parse_();
// @ts-ignore
    s2 = peg$parseadditive_binop();
// @ts-ignore
    if (s2 !== peg$FAILED) {
// @ts-ignore
      s3 = peg$parse_();
// @ts-ignore
      s4 = [];
// @ts-ignore
      s5 = peg$currPos;
// @ts-ignore
      s6 = peg$parse_();
// @ts-ignore
      if (input.substr(peg$currPos, 2) === peg$c48) {
// @ts-ignore
        s7 = peg$c48;
// @ts-ignore
        peg$currPos += 2;
// @ts-ignore
      } else {
// @ts-ignore
        s7 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e55); }
      }
// @ts-ignore
      if (s7 === peg$FAILED) {
// @ts-ignore
        if (input.substr(peg$currPos, 2) === peg$c49) {
// @ts-ignore
          s7 = peg$c49;
// @ts-ignore
          peg$currPos += 2;
// @ts-ignore
        } else {
// @ts-ignore
          s7 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e56); }
        }
// @ts-ignore
        if (s7 === peg$FAILED) {
// @ts-ignore
          if (input.substr(peg$currPos, 2) === peg$c50) {
// @ts-ignore
            s7 = peg$c50;
// @ts-ignore
            peg$currPos += 2;
// @ts-ignore
          } else {
// @ts-ignore
            s7 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e57); }
          }
// @ts-ignore
          if (s7 === peg$FAILED) {
// @ts-ignore
            if (input.substr(peg$currPos, 2) === peg$c51) {
// @ts-ignore
              s7 = peg$c51;
// @ts-ignore
              peg$currPos += 2;
// @ts-ignore
            } else {
// @ts-ignore
              s7 = peg$FAILED;
// @ts-ignore
              if (peg$silentFails === 0) { peg$fail(peg$e58); }
            }
// @ts-ignore
            if (s7 === peg$FAILED) {
// @ts-ignore
              s7 = input.charAt(peg$currPos);
// @ts-ignore
              if (peg$r4.test(s7)) {
// @ts-ignore
                peg$currPos++;
// @ts-ignore
              } else {
// @ts-ignore
                s7 = peg$FAILED;
// @ts-ignore
                if (peg$silentFails === 0) { peg$fail(peg$e59); }
              }
            }
          }
        }
      }
// @ts-ignore
      if (s7 !== peg$FAILED) {
// @ts-ignore
        s8 = peg$parse_();
// @ts-ignore
        s9 = peg$parseadditive_binop();
// @ts-ignore
        if (s9 !== peg$FAILED) {
// @ts-ignore
          s5 = [ s7, s9 ];
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s5;
// @ts-ignore
          s5 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s5;
// @ts-ignore
        s5 = peg$FAILED;
      }
// @ts-ignore
      while (s5 !== peg$FAILED) {
// @ts-ignore
        s4.push(s5);
// @ts-ignore
        s5 = peg$currPos;
// @ts-ignore
        s6 = peg$parse_();
// @ts-ignore
        if (input.substr(peg$currPos, 2) === peg$c48) {
// @ts-ignore
          s7 = peg$c48;
// @ts-ignore
          peg$currPos += 2;
// @ts-ignore
        } else {
// @ts-ignore
          s7 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e55); }
        }
// @ts-ignore
        if (s7 === peg$FAILED) {
// @ts-ignore
          if (input.substr(peg$currPos, 2) === peg$c49) {
// @ts-ignore
            s7 = peg$c49;
// @ts-ignore
            peg$currPos += 2;
// @ts-ignore
          } else {
// @ts-ignore
            s7 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e56); }
          }
// @ts-ignore
          if (s7 === peg$FAILED) {
// @ts-ignore
            if (input.substr(peg$currPos, 2) === peg$c50) {
// @ts-ignore
              s7 = peg$c50;
// @ts-ignore
              peg$currPos += 2;
// @ts-ignore
            } else {
// @ts-ignore
              s7 = peg$FAILED;
// @ts-ignore
              if (peg$silentFails === 0) { peg$fail(peg$e57); }
            }
// @ts-ignore
            if (s7 === peg$FAILED) {
// @ts-ignore
              if (input.substr(peg$currPos, 2) === peg$c51) {
// @ts-ignore
                s7 = peg$c51;
// @ts-ignore
                peg$currPos += 2;
// @ts-ignore
              } else {
// @ts-ignore
                s7 = peg$FAILED;
// @ts-ignore
                if (peg$silentFails === 0) { peg$fail(peg$e58); }
              }
// @ts-ignore
              if (s7 === peg$FAILED) {
// @ts-ignore
                s7 = input.charAt(peg$currPos);
// @ts-ignore
                if (peg$r4.test(s7)) {
// @ts-ignore
                  peg$currPos++;
// @ts-ignore
                } else {
// @ts-ignore
                  s7 = peg$FAILED;
// @ts-ignore
                  if (peg$silentFails === 0) { peg$fail(peg$e59); }
                }
              }
            }
          }
        }
// @ts-ignore
        if (s7 !== peg$FAILED) {
// @ts-ignore
          s8 = peg$parse_();
// @ts-ignore
          s9 = peg$parseadditive_binop();
// @ts-ignore
          if (s9 !== peg$FAILED) {
// @ts-ignore
            s5 = [ s7, s9 ];
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s5;
// @ts-ignore
            s5 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s5;
// @ts-ignore
          s5 = peg$FAILED;
        }
      }
// @ts-ignore
      s5 = peg$parse_();
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f36(s2, s4);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseadditive_binop() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parse_();
// @ts-ignore
    s2 = peg$parsemultiplicative_binop();
// @ts-ignore
    if (s2 !== peg$FAILED) {
// @ts-ignore
      s3 = peg$parse_();
// @ts-ignore
      s4 = [];
// @ts-ignore
      s5 = peg$currPos;
// @ts-ignore
      s6 = peg$parse_();
// @ts-ignore
      s7 = input.charAt(peg$currPos);
// @ts-ignore
      if (peg$r5.test(s7)) {
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s7 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e60); }
      }
// @ts-ignore
      if (s7 !== peg$FAILED) {
// @ts-ignore
        s8 = peg$parse_();
// @ts-ignore
        s9 = peg$parsemultiplicative_binop();
// @ts-ignore
        if (s9 !== peg$FAILED) {
// @ts-ignore
          s5 = [ s7, s9 ];
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s5;
// @ts-ignore
          s5 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s5;
// @ts-ignore
        s5 = peg$FAILED;
      }
// @ts-ignore
      while (s5 !== peg$FAILED) {
// @ts-ignore
        s4.push(s5);
// @ts-ignore
        s5 = peg$currPos;
// @ts-ignore
        s6 = peg$parse_();
// @ts-ignore
        s7 = input.charAt(peg$currPos);
// @ts-ignore
        if (peg$r5.test(s7)) {
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s7 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e60); }
        }
// @ts-ignore
        if (s7 !== peg$FAILED) {
// @ts-ignore
          s8 = peg$parse_();
// @ts-ignore
          s9 = peg$parsemultiplicative_binop();
// @ts-ignore
          if (s9 !== peg$FAILED) {
// @ts-ignore
            s5 = [ s7, s9 ];
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s5;
// @ts-ignore
            s5 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s5;
// @ts-ignore
          s5 = peg$FAILED;
        }
      }
// @ts-ignore
      s5 = peg$parse_();
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f37(s2, s4);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsemultiplicative_binop() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parse_();
// @ts-ignore
    s2 = peg$parsefactor();
// @ts-ignore
    if (s2 !== peg$FAILED) {
// @ts-ignore
      s3 = peg$parse_();
// @ts-ignore
      s4 = [];
// @ts-ignore
      s5 = peg$currPos;
// @ts-ignore
      s6 = peg$parse_();
// @ts-ignore
      s7 = input.charAt(peg$currPos);
// @ts-ignore
      if (peg$r6.test(s7)) {
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s7 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e61); }
      }
// @ts-ignore
      if (s7 !== peg$FAILED) {
// @ts-ignore
        s8 = peg$parse_();
// @ts-ignore
        s9 = peg$parsefactor();
// @ts-ignore
        if (s9 !== peg$FAILED) {
// @ts-ignore
          s5 = [ s7, s9 ];
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s5;
// @ts-ignore
          s5 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s5;
// @ts-ignore
        s5 = peg$FAILED;
      }
// @ts-ignore
      while (s5 !== peg$FAILED) {
// @ts-ignore
        s4.push(s5);
// @ts-ignore
        s5 = peg$currPos;
// @ts-ignore
        s6 = peg$parse_();
// @ts-ignore
        s7 = input.charAt(peg$currPos);
// @ts-ignore
        if (peg$r6.test(s7)) {
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s7 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e61); }
        }
// @ts-ignore
        if (s7 !== peg$FAILED) {
// @ts-ignore
          s8 = peg$parse_();
// @ts-ignore
          s9 = peg$parsefactor();
// @ts-ignore
          if (s9 !== peg$FAILED) {
// @ts-ignore
            s5 = [ s7, s9 ];
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s5;
// @ts-ignore
            s5 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s5;
// @ts-ignore
          s5 = peg$FAILED;
        }
      }
// @ts-ignore
      s5 = peg$parse_();
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f38(s2, s4);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsefactor() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parse_();
// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 40) {
// @ts-ignore
      s2 = peg$c3;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s2 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e3); }
    }
// @ts-ignore
    if (s2 !== peg$FAILED) {
// @ts-ignore
      s3 = peg$parse_();
// @ts-ignore
      s4 = peg$parselogical_binop();
// @ts-ignore
      if (s4 === peg$FAILED) {
// @ts-ignore
        s4 = peg$parseunop();
      }
// @ts-ignore
      if (s4 !== peg$FAILED) {
// @ts-ignore
        s5 = peg$parse_();
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 41) {
// @ts-ignore
          s6 = peg$c4;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s6 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e4); }
        }
// @ts-ignore
        if (s6 !== peg$FAILED) {
// @ts-ignore
          s7 = peg$parse_();
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s0 = peg$f39(s4);
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$parsenonBinaryOperatorExpression();
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseunop() {
// @ts-ignore
    var s0, s1, s2, s3, s4;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parse_();
// @ts-ignore
    s2 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 2) === peg$c52) {
// @ts-ignore
      s3 = peg$c52;
// @ts-ignore
      peg$currPos += 2;
// @ts-ignore
    } else {
// @ts-ignore
      s3 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e62); }
    }
// @ts-ignore
    if (s3 !== peg$FAILED) {
// @ts-ignore
      s4 = peg$parse_();
// @ts-ignore
      s2 = s3;
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s2;
// @ts-ignore
      s2 = peg$FAILED;
    }
// @ts-ignore
    if (s2 === peg$FAILED) {
// @ts-ignore
      s2 = input.charAt(peg$currPos);
// @ts-ignore
      if (peg$r7.test(s2)) {
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s2 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e63); }
      }
    }
// @ts-ignore
    if (s2 !== peg$FAILED) {
// @ts-ignore
      s3 = peg$parseunaryOperatorValidExpressions();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parse_();
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f40(s2, s3);
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseidentifierOrIndexList() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseIndexExpression();
// @ts-ignore
    if (s1 === peg$FAILED) {
// @ts-ignore
      s1 = peg$parseStructField();
// @ts-ignore
      if (s1 === peg$FAILED) {
// @ts-ignore
        s1 = peg$parseIdentifier();
      }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = [];
// @ts-ignore
      s3 = peg$currPos;
// @ts-ignore
      s4 = peg$parse_();
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 44) {
// @ts-ignore
        s5 = peg$c7;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s5 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e7); }
      }
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        s6 = peg$parse_();
// @ts-ignore
        s7 = peg$parseIndexExpression();
// @ts-ignore
        if (s7 === peg$FAILED) {
// @ts-ignore
          s7 = peg$parseIdentifier();
        }
// @ts-ignore
        if (s7 !== peg$FAILED) {
// @ts-ignore
          s3 = s7;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s3;
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
      while (s3 !== peg$FAILED) {
// @ts-ignore
        s2.push(s3);
// @ts-ignore
        s3 = peg$currPos;
// @ts-ignore
        s4 = peg$parse_();
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 44) {
// @ts-ignore
          s5 = peg$c7;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s5 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e7); }
        }
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse_();
// @ts-ignore
          s7 = peg$parseIndexExpression();
// @ts-ignore
          if (s7 === peg$FAILED) {
// @ts-ignore
            s7 = peg$parseIdentifier();
          }
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s3 = s7;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s3;
// @ts-ignore
            s3 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
      }
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f41(s1, s2);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseassignmentStatement() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parse_();
// @ts-ignore
    s2 = peg$parseidentifierOrIndexList();
// @ts-ignore
    if (s2 !== peg$FAILED) {
// @ts-ignore
      s3 = peg$parse_();
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 61) {
// @ts-ignore
        s4 = peg$c5;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s4 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e5); }
      }
// @ts-ignore
      if (s4 !== peg$FAILED) {
// @ts-ignore
        s5 = peg$parse_();
// @ts-ignore
        s6 = peg$parsevalueList();
// @ts-ignore
        if (s6 !== peg$FAILED) {
// @ts-ignore
          s7 = peg$parse_();
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s0 = peg$f42(s2, s6);
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseexpressionStatement() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parse_();
// @ts-ignore
    s2 = peg$parseexpression();
// @ts-ignore
    if (s2 !== peg$FAILED) {
// @ts-ignore
      s3 = peg$parse_();
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f43(s2);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsereturnStatement() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parse_();
// @ts-ignore
    if (input.substr(peg$currPos, 6) === peg$c28) {
// @ts-ignore
      s2 = peg$c28;
// @ts-ignore
      peg$currPos += 6;
// @ts-ignore
    } else {
// @ts-ignore
      s2 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e31); }
    }
// @ts-ignore
    if (s2 !== peg$FAILED) {
// @ts-ignore
      s3 = peg$parse_();
// @ts-ignore
      s4 = peg$parsevalueList();
// @ts-ignore
      if (s4 === peg$FAILED) {
// @ts-ignore
        s4 = null;
      }
// @ts-ignore
      s5 = peg$parse_();
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f44(s4);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseifStatement() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parse_();
// @ts-ignore
    if (input.substr(peg$currPos, 2) === peg$c22) {
// @ts-ignore
      s2 = peg$c22;
// @ts-ignore
      peg$currPos += 2;
// @ts-ignore
    } else {
// @ts-ignore
      s2 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e25); }
    }
// @ts-ignore
    if (s2 !== peg$FAILED) {
// @ts-ignore
      s3 = peg$parsespc();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$currPos;
// @ts-ignore
        s5 = peg$parsestatement();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s4 = s5;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s4;
// @ts-ignore
          s4 = peg$FAILED;
        }
// @ts-ignore
        if (s4 === peg$FAILED) {
// @ts-ignore
          s4 = null;
        }
// @ts-ignore
        s5 = peg$parse_();
// @ts-ignore
        s6 = peg$parseexpression();
// @ts-ignore
        if (s6 !== peg$FAILED) {
// @ts-ignore
          s7 = peg$parse_();
// @ts-ignore
          if (input.charCodeAt(peg$currPos) === 123) {
// @ts-ignore
            s8 = peg$c9;
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s8 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e9); }
          }
// @ts-ignore
          if (s8 !== peg$FAILED) {
// @ts-ignore
            s9 = peg$parse_();
// @ts-ignore
            s10 = [];
// @ts-ignore
            s11 = peg$parsestatement();
// @ts-ignore
            while (s11 !== peg$FAILED) {
// @ts-ignore
              s10.push(s11);
// @ts-ignore
              s11 = peg$parsestatement();
            }
// @ts-ignore
            s11 = peg$parse_();
// @ts-ignore
            if (input.charCodeAt(peg$currPos) === 125) {
// @ts-ignore
              s12 = peg$c10;
// @ts-ignore
              peg$currPos++;
// @ts-ignore
            } else {
// @ts-ignore
              s12 = peg$FAILED;
// @ts-ignore
              if (peg$silentFails === 0) { peg$fail(peg$e10); }
            }
// @ts-ignore
            if (s12 !== peg$FAILED) {
// @ts-ignore
              s13 = peg$parse_();
// @ts-ignore
              s14 = peg$currPos;
// @ts-ignore
              s15 = peg$parseelseStatement();
// @ts-ignore
              if (s15 !== peg$FAILED) {
// @ts-ignore
                s14 = s15;
// @ts-ignore
              } else {
// @ts-ignore
                peg$currPos = s14;
// @ts-ignore
                s14 = peg$FAILED;
              }
// @ts-ignore
              if (s14 === peg$FAILED) {
// @ts-ignore
                s14 = null;
              }
// @ts-ignore
              s15 = peg$parse_();
// @ts-ignore
              peg$savedPos = s0;
// @ts-ignore
              s0 = peg$f45(s4, s6, s10, s14);
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s0;
// @ts-ignore
              s0 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseelseStatement() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parse_();
// @ts-ignore
    if (input.substr(peg$currPos, 4) === peg$c17) {
// @ts-ignore
      s2 = peg$c17;
// @ts-ignore
      peg$currPos += 4;
// @ts-ignore
    } else {
// @ts-ignore
      s2 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e20); }
    }
// @ts-ignore
    if (s2 !== peg$FAILED) {
// @ts-ignore
      s3 = peg$parse_();
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 123) {
// @ts-ignore
        s4 = peg$c9;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s4 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e9); }
      }
// @ts-ignore
      if (s4 !== peg$FAILED) {
// @ts-ignore
        s5 = peg$parse_();
// @ts-ignore
        s6 = [];
// @ts-ignore
        s7 = peg$parsestatement();
// @ts-ignore
        while (s7 !== peg$FAILED) {
// @ts-ignore
          s6.push(s7);
// @ts-ignore
          s7 = peg$parsestatement();
        }
// @ts-ignore
        s7 = peg$parse_();
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 125) {
// @ts-ignore
          s8 = peg$c10;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s8 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e10); }
        }
// @ts-ignore
        if (s8 !== peg$FAILED) {
// @ts-ignore
          s9 = peg$parse_();
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s0 = peg$f46(s6);
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$parseelseIfStatement();
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseelseIfStatement() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parse_();
// @ts-ignore
    if (input.substr(peg$currPos, 4) === peg$c17) {
// @ts-ignore
      s2 = peg$c17;
// @ts-ignore
      peg$currPos += 4;
// @ts-ignore
    } else {
// @ts-ignore
      s2 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e20); }
    }
// @ts-ignore
    if (s2 !== peg$FAILED) {
// @ts-ignore
      s3 = peg$parsespc();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parseifStatement();
// @ts-ignore
        if (s4 !== peg$FAILED) {
// @ts-ignore
          s5 = peg$parse_();
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s0 = peg$f47(s4);
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseforStatement() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parse_();
// @ts-ignore
    if (input.substr(peg$currPos, 3) === peg$c19) {
// @ts-ignore
      s2 = peg$c19;
// @ts-ignore
      peg$currPos += 3;
// @ts-ignore
    } else {
// @ts-ignore
      s2 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e22); }
    }
// @ts-ignore
    if (s2 !== peg$FAILED) {
// @ts-ignore
      s3 = peg$parsespc();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parsestatement();
// @ts-ignore
        if (s4 === peg$FAILED) {
// @ts-ignore
          s4 = null;
        }
// @ts-ignore
        s5 = peg$parse_();
// @ts-ignore
        s6 = peg$parseexpression();
// @ts-ignore
        if (s6 === peg$FAILED) {
// @ts-ignore
          s6 = null;
        }
// @ts-ignore
        s7 = peg$parse_();
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 59) {
// @ts-ignore
          s8 = peg$c0;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s8 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e0); }
        }
// @ts-ignore
        if (s8 !== peg$FAILED) {
// @ts-ignore
          s9 = peg$parse_();
// @ts-ignore
          s10 = peg$parseassignmentStatement();
// @ts-ignore
          if (s10 === peg$FAILED) {
// @ts-ignore
            s10 = peg$parseexpressionStatement();
          }
// @ts-ignore
          if (s10 === peg$FAILED) {
// @ts-ignore
            s10 = null;
          }
// @ts-ignore
          s11 = peg$parse_();
// @ts-ignore
          if (input.charCodeAt(peg$currPos) === 123) {
// @ts-ignore
            s12 = peg$c9;
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s12 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e9); }
          }
// @ts-ignore
          if (s12 !== peg$FAILED) {
// @ts-ignore
            s13 = peg$parse_();
// @ts-ignore
            s14 = [];
// @ts-ignore
            s15 = peg$parsestatement();
// @ts-ignore
            while (s15 !== peg$FAILED) {
// @ts-ignore
              s14.push(s15);
// @ts-ignore
              s15 = peg$parsestatement();
            }
// @ts-ignore
            s15 = peg$parse_();
// @ts-ignore
            if (input.charCodeAt(peg$currPos) === 125) {
// @ts-ignore
              s16 = peg$c10;
// @ts-ignore
              peg$currPos++;
// @ts-ignore
            } else {
// @ts-ignore
              s16 = peg$FAILED;
// @ts-ignore
              if (peg$silentFails === 0) { peg$fail(peg$e10); }
            }
// @ts-ignore
            if (s16 !== peg$FAILED) {
// @ts-ignore
              s17 = peg$parse_();
// @ts-ignore
              peg$savedPos = s0;
// @ts-ignore
              s0 = peg$f48(s4, s6, s10, s14);
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s0;
// @ts-ignore
              s0 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsegoStatement() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parse_();
// @ts-ignore
    if (input.substr(peg$currPos, 2) === peg$c20) {
// @ts-ignore
      s2 = peg$c20;
// @ts-ignore
      peg$currPos += 2;
// @ts-ignore
    } else {
// @ts-ignore
      s2 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e23); }
    }
// @ts-ignore
    if (s2 !== peg$FAILED) {
// @ts-ignore
      s3 = peg$parsespc();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parseapplicationOrIndexOrAccessExpression();
// @ts-ignore
        if (s4 !== peg$FAILED) {
// @ts-ignore
          s5 = peg$parse_();
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s0 = peg$f49(s4);
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsesendStatement() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parse_();
// @ts-ignore
    s2 = peg$parseexpression();
// @ts-ignore
    if (s2 !== peg$FAILED) {
// @ts-ignore
      s3 = peg$parse_();
// @ts-ignore
      if (input.substr(peg$currPos, 2) === peg$c52) {
// @ts-ignore
        s4 = peg$c52;
// @ts-ignore
        peg$currPos += 2;
// @ts-ignore
      } else {
// @ts-ignore
        s4 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e62); }
      }
// @ts-ignore
      if (s4 !== peg$FAILED) {
// @ts-ignore
        s5 = peg$parse_();
// @ts-ignore
        s6 = peg$parseexpression();
// @ts-ignore
        if (s6 !== peg$FAILED) {
// @ts-ignore
          s7 = peg$parse_();
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s0 = peg$f50(s2, s6);
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsereceiveExpression() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parse_();
// @ts-ignore
    if (input.substr(peg$currPos, 2) === peg$c52) {
// @ts-ignore
      s2 = peg$c52;
// @ts-ignore
      peg$currPos += 2;
// @ts-ignore
    } else {
// @ts-ignore
      s2 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e62); }
    }
// @ts-ignore
    if (s2 !== peg$FAILED) {
// @ts-ignore
      s3 = peg$parse_();
// @ts-ignore
      s4 = peg$parseexpression();
// @ts-ignore
      if (s4 !== peg$FAILED) {
// @ts-ignore
        s5 = peg$parse_();
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f51(s4);
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsereceiveStatement() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parse_();
// @ts-ignore
    s2 = peg$parseidentifierList();
// @ts-ignore
    if (s2 !== peg$FAILED) {
// @ts-ignore
      s3 = peg$parse_();
// @ts-ignore
      if (input.substr(peg$currPos, 2) === peg$c6) {
// @ts-ignore
        s4 = peg$c6;
// @ts-ignore
        peg$currPos += 2;
// @ts-ignore
      } else {
// @ts-ignore
        s4 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e6); }
      }
// @ts-ignore
      if (s4 !== peg$FAILED) {
// @ts-ignore
        s5 = peg$parse_();
// @ts-ignore
        s6 = peg$parsereceiveExpression();
// @ts-ignore
        if (s6 !== peg$FAILED) {
// @ts-ignore
          s7 = peg$parse_();
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s0 = peg$f52(s2, s6);
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$currPos;
// @ts-ignore
      s1 = peg$parse_();
// @ts-ignore
      s2 = peg$parsevalueList();
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        s3 = peg$parse_();
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 61) {
// @ts-ignore
          s4 = peg$c5;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s4 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e5); }
        }
// @ts-ignore
        if (s4 !== peg$FAILED) {
// @ts-ignore
          s5 = peg$parse_();
// @ts-ignore
          s6 = peg$parsereceiveExpression();
// @ts-ignore
          if (s6 !== peg$FAILED) {
// @ts-ignore
            s7 = peg$parse_();
// @ts-ignore
            peg$savedPos = s0;
// @ts-ignore
            s0 = peg$f53(s2, s6);
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        s0 = peg$currPos;
// @ts-ignore
        s1 = peg$parse_();
// @ts-ignore
        s2 = peg$parsereceiveExpression();
// @ts-ignore
        if (s2 !== peg$FAILED) {
// @ts-ignore
          s3 = peg$parse_();
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s0 = peg$f54(s2);
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseselectCaseHeader() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parse_();
// @ts-ignore
    if (input.substr(peg$currPos, 4) === peg$c12) {
// @ts-ignore
      s2 = peg$c12;
// @ts-ignore
      peg$currPos += 4;
// @ts-ignore
    } else {
// @ts-ignore
      s2 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e15); }
    }
// @ts-ignore
    if (s2 !== peg$FAILED) {
// @ts-ignore
      s3 = peg$parsespc();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parsesendStatement();
// @ts-ignore
        if (s4 === peg$FAILED) {
// @ts-ignore
          s4 = peg$parsereceiveStatement();
        }
// @ts-ignore
        if (s4 !== peg$FAILED) {
// @ts-ignore
          s5 = peg$parse_();
// @ts-ignore
          if (input.charCodeAt(peg$currPos) === 58) {
// @ts-ignore
            s6 = peg$c41;
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s6 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e47); }
          }
// @ts-ignore
          if (s6 !== peg$FAILED) {
// @ts-ignore
            s7 = peg$parse_();
// @ts-ignore
            peg$savedPos = s0;
// @ts-ignore
            s0 = peg$f55(s4);
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsedefaultCaseHeader() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parse_();
// @ts-ignore
    if (input.substr(peg$currPos, 7) === peg$c15) {
// @ts-ignore
      s2 = peg$c15;
// @ts-ignore
      peg$currPos += 7;
// @ts-ignore
    } else {
// @ts-ignore
      s2 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e18); }
    }
// @ts-ignore
    if (s2 !== peg$FAILED) {
// @ts-ignore
      s3 = peg$parse_();
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 58) {
// @ts-ignore
        s4 = peg$c41;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s4 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e47); }
      }
// @ts-ignore
      if (s4 !== peg$FAILED) {
// @ts-ignore
        s5 = peg$parse_();
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f56();
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseselectBranch() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parse_();
// @ts-ignore
    s2 = peg$parseselectCaseHeader();
// @ts-ignore
    if (s2 === peg$FAILED) {
// @ts-ignore
      s2 = peg$parsedefaultCaseHeader();
    }
// @ts-ignore
    if (s2 !== peg$FAILED) {
// @ts-ignore
      s3 = [];
// @ts-ignore
      s4 = peg$currPos;
// @ts-ignore
      s5 = peg$parse_();
// @ts-ignore
      s6 = peg$parsestatement();
// @ts-ignore
      if (s6 !== peg$FAILED) {
// @ts-ignore
        s7 = peg$parse_();
// @ts-ignore
        s4 = s6;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s4;
// @ts-ignore
        s4 = peg$FAILED;
      }
// @ts-ignore
      while (s4 !== peg$FAILED) {
// @ts-ignore
        s3.push(s4);
// @ts-ignore
        s4 = peg$currPos;
// @ts-ignore
        s5 = peg$parse_();
// @ts-ignore
        s6 = peg$parsestatement();
// @ts-ignore
        if (s6 !== peg$FAILED) {
// @ts-ignore
          s7 = peg$parse_();
// @ts-ignore
          s4 = s6;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s4;
// @ts-ignore
          s4 = peg$FAILED;
        }
      }
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f57(s2, s3);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseselectStatement() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parse_();
// @ts-ignore
    if (input.substr(peg$currPos, 6) === peg$c29) {
// @ts-ignore
      s2 = peg$c29;
// @ts-ignore
      peg$currPos += 6;
// @ts-ignore
    } else {
// @ts-ignore
      s2 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e32); }
    }
// @ts-ignore
    if (s2 !== peg$FAILED) {
// @ts-ignore
      s3 = peg$parse_();
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 123) {
// @ts-ignore
        s4 = peg$c9;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s4 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e9); }
      }
// @ts-ignore
      if (s4 !== peg$FAILED) {
// @ts-ignore
        s5 = [];
// @ts-ignore
        s6 = peg$currPos;
// @ts-ignore
        s7 = peg$parse_();
// @ts-ignore
        s8 = peg$parseselectBranch();
// @ts-ignore
        if (s8 !== peg$FAILED) {
// @ts-ignore
          s9 = peg$parse_();
// @ts-ignore
          s6 = s8;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s6;
// @ts-ignore
          s6 = peg$FAILED;
        }
// @ts-ignore
        while (s6 !== peg$FAILED) {
// @ts-ignore
          s5.push(s6);
// @ts-ignore
          s6 = peg$currPos;
// @ts-ignore
          s7 = peg$parse_();
// @ts-ignore
          s8 = peg$parseselectBranch();
// @ts-ignore
          if (s8 !== peg$FAILED) {
// @ts-ignore
            s9 = peg$parse_();
// @ts-ignore
            s6 = s8;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s6;
// @ts-ignore
            s6 = peg$FAILED;
          }
        }
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 125) {
// @ts-ignore
          s6 = peg$c10;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s6 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e10); }
        }
// @ts-ignore
        if (s6 !== peg$FAILED) {
// @ts-ignore
          s7 = peg$parse_();
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s0 = peg$f58(s5);
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsetypeDeclaration() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parse_();
// @ts-ignore
    if (input.substr(peg$currPos, 4) === peg$c32) {
// @ts-ignore
      s2 = peg$c32;
// @ts-ignore
      peg$currPos += 4;
// @ts-ignore
    } else {
// @ts-ignore
      s2 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e35); }
    }
// @ts-ignore
    if (s2 !== peg$FAILED) {
// @ts-ignore
      s3 = peg$parsespc();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parseCustomType();
// @ts-ignore
        if (s4 !== peg$FAILED) {
// @ts-ignore
          s5 = peg$parsespc();
// @ts-ignore
          if (s5 !== peg$FAILED) {
// @ts-ignore
            s6 = peg$parseType();
// @ts-ignore
            if (s6 !== peg$FAILED) {
// @ts-ignore
              s7 = peg$parse_();
// @ts-ignore
              if (input.charCodeAt(peg$currPos) === 59) {
// @ts-ignore
                s8 = peg$c0;
// @ts-ignore
                peg$currPos++;
// @ts-ignore
              } else {
// @ts-ignore
                s8 = peg$FAILED;
// @ts-ignore
                if (peg$silentFails === 0) { peg$fail(peg$e0); }
              }
// @ts-ignore
              if (s8 !== peg$FAILED) {
// @ts-ignore
                peg$savedPos = s0;
// @ts-ignore
                s0 = peg$f59(s4, s6);
// @ts-ignore
              } else {
// @ts-ignore
                peg$currPos = s0;
// @ts-ignore
                s0 = peg$FAILED;
              }
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s0;
// @ts-ignore
              s0 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsestatement() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parse_();
// @ts-ignore
    s2 = peg$parsereturnStatement();
// @ts-ignore
    if (s2 === peg$FAILED) {
// @ts-ignore
      s2 = peg$parsegoStatement();
// @ts-ignore
      if (s2 === peg$FAILED) {
// @ts-ignore
        s2 = peg$parsesendStatement();
// @ts-ignore
        if (s2 === peg$FAILED) {
// @ts-ignore
          s2 = peg$parseassignmentStatement();
// @ts-ignore
          if (s2 === peg$FAILED) {
// @ts-ignore
            s2 = peg$parseexpressionStatement();
          }
        }
      }
    }
// @ts-ignore
    if (s2 !== peg$FAILED) {
// @ts-ignore
      s3 = peg$parse_();
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 59) {
// @ts-ignore
        s4 = peg$c0;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s4 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e0); }
      }
// @ts-ignore
      if (s4 !== peg$FAILED) {
// @ts-ignore
        s5 = peg$parse_();
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f60(s2);
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$parseemptyStatement();
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        s0 = peg$parseifStatement();
// @ts-ignore
        if (s0 === peg$FAILED) {
// @ts-ignore
          s0 = peg$parseforStatement();
// @ts-ignore
          if (s0 === peg$FAILED) {
// @ts-ignore
            s0 = peg$parseselectStatement();
// @ts-ignore
            if (s0 === peg$FAILED) {
// @ts-ignore
              s0 = peg$parsenamedFunction();
// @ts-ignore
              if (s0 === peg$FAILED) {
// @ts-ignore
                s0 = peg$parsedeclaration();
// @ts-ignore
                if (s0 === peg$FAILED) {
// @ts-ignore
                  s0 = peg$parsetypeDeclaration();
                }
              }
            }
          }
        }
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseemptyStatement() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parse_();
// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 59) {
// @ts-ignore
      s2 = peg$c0;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s2 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e0); }
    }
// @ts-ignore
    if (s2 !== peg$FAILED) {
// @ts-ignore
      s3 = peg$parse_();
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f61();
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsespc() {
// @ts-ignore
    var s0, s1;

// @ts-ignore
    peg$silentFails++;
// @ts-ignore
    s0 = [];
// @ts-ignore
    s1 = peg$parsefiller();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      while (s1 !== peg$FAILED) {
// @ts-ignore
        s0.push(s1);
// @ts-ignore
        s1 = peg$parsefiller();
      }
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
    }
// @ts-ignore
    peg$silentFails--;
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e64); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parse_() {
// @ts-ignore
    var s0, s1;

// @ts-ignore
    peg$silentFails++;
// @ts-ignore
    s0 = [];
// @ts-ignore
    s1 = peg$parsefiller();
// @ts-ignore
    while (s1 !== peg$FAILED) {
// @ts-ignore
      s0.push(s1);
// @ts-ignore
      s1 = peg$parsefiller();
    }
// @ts-ignore
    peg$silentFails--;
// @ts-ignore
    s1 = peg$FAILED;
// @ts-ignore
    if (peg$silentFails === 0) { peg$fail(peg$e65); }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsefiller() {
// @ts-ignore
    var s0;

// @ts-ignore
    s0 = peg$parseBlockComment();
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$parseLineComment();
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        s0 = peg$parseWhitespace();
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseLineComment() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 2) === peg$c53) {
// @ts-ignore
      s1 = peg$c53;
// @ts-ignore
      peg$currPos += 2;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e66); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = [];
// @ts-ignore
      s3 = input.charAt(peg$currPos);
// @ts-ignore
      if (peg$r8.test(s3)) {
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s3 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e67); }
      }
// @ts-ignore
      while (s3 !== peg$FAILED) {
// @ts-ignore
        s2.push(s3);
// @ts-ignore
        s3 = input.charAt(peg$currPos);
// @ts-ignore
        if (peg$r8.test(s3)) {
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s3 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e67); }
        }
      }
// @ts-ignore
      s1 = [s1, s2];
// @ts-ignore
      s0 = s1;
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseBlockComment() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 2) === peg$c54) {
// @ts-ignore
      s1 = peg$c54;
// @ts-ignore
      peg$currPos += 2;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e68); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = [];
// @ts-ignore
      s3 = peg$currPos;
// @ts-ignore
      s4 = peg$currPos;
// @ts-ignore
      peg$silentFails++;
// @ts-ignore
      if (input.substr(peg$currPos, 2) === peg$c55) {
// @ts-ignore
        s5 = peg$c55;
// @ts-ignore
        peg$currPos += 2;
// @ts-ignore
      } else {
// @ts-ignore
        s5 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e69); }
      }
// @ts-ignore
      peg$silentFails--;
// @ts-ignore
      if (s5 === peg$FAILED) {
// @ts-ignore
        s4 = undefined;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s4;
// @ts-ignore
        s4 = peg$FAILED;
      }
// @ts-ignore
      if (s4 !== peg$FAILED) {
// @ts-ignore
        if (input.length > peg$currPos) {
// @ts-ignore
          s5 = input.charAt(peg$currPos);
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s5 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e70); }
        }
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s4 = [s4, s5];
// @ts-ignore
          s3 = s4;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s3;
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
      while (s3 !== peg$FAILED) {
// @ts-ignore
        s2.push(s3);
// @ts-ignore
        s3 = peg$currPos;
// @ts-ignore
        s4 = peg$currPos;
// @ts-ignore
        peg$silentFails++;
// @ts-ignore
        if (input.substr(peg$currPos, 2) === peg$c55) {
// @ts-ignore
          s5 = peg$c55;
// @ts-ignore
          peg$currPos += 2;
// @ts-ignore
        } else {
// @ts-ignore
          s5 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e69); }
        }
// @ts-ignore
        peg$silentFails--;
// @ts-ignore
        if (s5 === peg$FAILED) {
// @ts-ignore
          s4 = undefined;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s4;
// @ts-ignore
          s4 = peg$FAILED;
        }
// @ts-ignore
        if (s4 !== peg$FAILED) {
// @ts-ignore
          if (input.length > peg$currPos) {
// @ts-ignore
            s5 = input.charAt(peg$currPos);
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s5 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e70); }
          }
// @ts-ignore
          if (s5 !== peg$FAILED) {
// @ts-ignore
            s4 = [s4, s5];
// @ts-ignore
            s3 = s4;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s3;
// @ts-ignore
            s3 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
      }
// @ts-ignore
      if (input.substr(peg$currPos, 2) === peg$c55) {
// @ts-ignore
        s3 = peg$c55;
// @ts-ignore
        peg$currPos += 2;
// @ts-ignore
      } else {
// @ts-ignore
        s3 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e69); }
      }
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s1 = [s1, s2, s3];
// @ts-ignore
        s0 = s1;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseWhitespace() {
// @ts-ignore
    var s0;

// @ts-ignore
    s0 = input.charAt(peg$currPos);
// @ts-ignore
    if (peg$r9.test(s0)) {
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e71); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  peg$result = peg$startRuleFunction();

// @ts-ignore
  if (options.peg$library) {
// @ts-ignore
    return /** @type {any} */ ({
// @ts-ignore
      peg$result,
// @ts-ignore
      peg$currPos,
// @ts-ignore
      peg$FAILED,
// @ts-ignore
      peg$maxFailExpected,
// @ts-ignore
      peg$maxFailPos
    });
  }
// @ts-ignore
  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
// @ts-ignore
    return peg$result;
// @ts-ignore
  } else {
// @ts-ignore
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
// @ts-ignore
      peg$fail(peg$endExpectation());
    }

// @ts-ignore
    throw peg$buildStructuredError(
// @ts-ignore
      peg$maxFailExpected,
// @ts-ignore
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
// @ts-ignore
      peg$maxFailPos < input.length
// @ts-ignore
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
// @ts-ignore
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

// @ts-ignore
  return {
    StartRules: ["start"],
    SyntaxError: peg$SyntaxError,
    parse: peg$parse
  };
})()

export interface FilePosition {
  offset: number;
  line: number;
  column: number;
}

export interface FileRange {
  start: FilePosition;
  end: FilePosition;
  source: string;
}

export interface LiteralExpectation {
  type: "literal";
  text: string;
  ignoreCase: boolean;
}

export interface ClassParts extends Array<string | ClassParts> {}

export interface ClassExpectation {
  type: "class";
  parts: ClassParts;
  inverted: boolean;
  ignoreCase: boolean;
}

export interface AnyExpectation {
  type: "any";
}

export interface EndExpectation {
  type: "end";
}

export interface OtherExpectation {
  type: "other";
  description: string;
}

export type Expectation = LiteralExpectation | ClassExpectation | AnyExpectation | EndExpectation | OtherExpectation;

declare class _PeggySyntaxError extends Error {
  public static buildMessage(expected: Expectation[], found: string | null): string;
  public message: string;
  public expected: Expectation[];
  public found: string | null;
  public location: FileRange;
  public name: string;
  constructor(message: string, expected: Expectation[], found: string | null, location: FileRange);
  format(sources: {
    source?: any;
    text: string;
  }[]): string;
}

export interface TraceEvent {
    type: string;
    rule: string;
    result?: any;
    location: FileRange;
  }

declare class _DefaultTracer {
  private indentLevel: number;
  public trace(event: TraceEvent): void;
}

peggyParser.SyntaxError.prototype.name = "PeggySyntaxError";

export interface ParseOptions {
  filename?: string;
  startRule?: "start";
  tracer?: any;
  [key: string]: any;
}
export type ParseFunction = <Options extends ParseOptions>(
    input: string,
    options?: Options
  ) => Options extends { startRule: infer StartRule } ?
    StartRule extends "start" ? Start : Start
    : Start;
export const parse: ParseFunction = peggyParser.parse;

export const PeggySyntaxError = peggyParser.SyntaxError as typeof _PeggySyntaxError;

export type PeggySyntaxError = _PeggySyntaxError;

// These types were autogenerated by ts-pegjs
export type Start = { type: string; top_declarations: any };
export type Declaration = StandardDeclaration | InferredTypeDeclaration;
export type StandardDeclaration = any;
export type DeclarationType = "var" | "const";
export type DeclarationList = GroupedDeclarationList | StandardDeclarationList;
export type GroupedDeclarationList = {
  type: string;
  declaration_type: any;
  ids: any;
  vals: any;
};
export type StandardDeclarationList = {
  type: string;
  declaration_type: any;
  ids: any;
  vals: any;
};
export type InferredTypeDeclaration = {
  type: string;
  declaration_type: any;
  ids: any;
  vals: any;
};
export type TypedIdentifierList = IdentifierList;
export type IdentifierList = [Identifier, ...Identifier[]];
export type ValueList = [Expression, ...Expression[]];
export type NamedFunction = {
  type: string;
  name: any;
  formals: any;
  retType: any;
  body: any;
};
export type AnonymousFunction = {
  type: string;
  name: any;
  formals: any;
  retType: any;
  body: any;
};
export type Function_1 = NamedFunction | AnonymousFunction;
export type FormalsList = any;
export type Identifier = { type: string; name: any; val_type: null };
export type GoKeyword = [
  (
    | "break"
    | "case"
    | "chan"
    | "const"
    | "continue"
    | "default"
    | "defer"
    | "else"
    | "fallthrough"
    | "for"
    | "func"
    | "go"
    | "goto"
    | "if"
    | "import"
    | "interface"
    | "map"
    | "package"
    | "range"
    | "return"
    | "select"
    | "struct"
    | "switch"
    | "type"
    | "var"
  ),
  undefined
];
export type Type = InbuiltType | CustomType;
export type InbuiltType =
  | FunctionType
  | TupleType
  | ChanType
  | ArrayType
  | SliceType
  | StructType
  | BasicType;
export type BasicType = any;
export type TupleType = any;
export type TypeList = [Type, ...Type[]];
export type FunctionType = any;
export type ChanType = any;
export type SliceType = any;
export type ArrayType = any;
export type StructElement = { type: string; name: any };
export type StructType = any;
export type CustomType = any;
export type StructFieldInstantiation = { type: string; field: any; expr: any };
export type StructFieldInstantiationList = [
  StructFieldInstantiation,
  ...StructFieldInstantiation[]
];
export type StructLiteral = { type: string; val_type: any; fields: any };
export type IndexExpression = any;
export type StructField = Identifier;
export type ApplicationValueList = [
  Expression | Type,
  ...(Expression | Type)[]
];
export type ApplicationOrIndexOrAccessExpression = "[" | "(" | ".";
export type OperableExpression =
  | Unop
  | AnonymousFunction
  | Literal
  | StructLiteral
  | Identifier;
export type Expression =
  | LogicalBinop
  | Unop
  | ApplicationOrIndexOrAccessExpression
  | AnonymousFunction
  | StructLiteral
  | Literal
  | Identifier;
export type UnaryOperatorValidExpressions =
  | ApplicationOrIndexOrAccessExpression
  | AnonymousFunction
  | Factor
  | StructLiteral
  | Literal
  | Identifier;
export type NonBinaryOperatorExpression =
  | ApplicationOrIndexOrAccessExpression
  | Unop
  | AnonymousFunction
  | StructLiteral
  | Literal
  | Identifier;
export type Literal = { type: string; value: any; val_type: any };
export type Number_1 = number;
export type Bool = boolean;
export type String_1 = any;
export type LogicalBinop = "&&" | "||";
export type ComparativeBinop = string;
export type AdditiveBinop = string;
export type MultiplicativeBinop = string;
export type Factor = (LogicalBinop | Unop) | NonBinaryOperatorExpression;
export type Unop =
  | { type: string; chan: any; inSelect: boolean }
  | { type: string; opcode: any; expr: any };
export type IdentifierOrIndexList = [
  IndexExpression | StructField | Identifier,
  ...(IndexExpression | Identifier)[]
];
export type AssignmentStatement = { type: string; ids: any; vals: any };
export type ExpressionStatement = { type: string; expression: any };
export type ReturnStatement = { type: string; expressions: any };
export type IfStatement = {
  type: string;
  cond: any;
  cons: any;
  alt: any;
  short: any;
};
export type ElseStatement = Statement[] | ElseIfStatement;
export type ElseIfStatement = [IfStatement];
export type ForStatement = {
  type: string;
  init: any;
  cond: any;
  post: any;
  body: any;
};
export type GoStatement = { type: string; app: any };
export type SendStatement = {
  type: string;
  chan: any;
  val: any;
  inSelect: boolean;
};
export type ReceiveExpression = { type: string; chan: any; inSelect: boolean };
export type ReceiveStatement =
  | { type: string; declaration_type: any; ids: any; vals: any }
  | { type: string; ids: any; vals: any }
  | { type: string; expression: any };
export type SelectCaseHeader = {
  type: "selectCase";
  statement: SendStatement | ReceiveStatement;
};
export type DefaultCaseHeader = { type: "defaultCase" };
export type SelectBranch = SelectCaseHeader | DefaultCaseHeader;
export type SelectStatement = {
  type: "selectStatement";
  cases: SelectBranch[] | never[];
};
export type TypeDeclaration = { type: string; name: any; dec_type: any };
export type Statement =
  | (
      | ReturnStatement
      | GoStatement
      | SendStatement
      | AssignmentStatement
      | ExpressionStatement
    )
  | EmptyStatement
  | IfStatement
  | ForStatement
  | SelectStatement
  | NamedFunction
  | Declaration
  | TypeDeclaration;
export type EmptyStatement = { type: "emptyStatement" };
export type Spc = Filler[];
export type _ = Filler[];
export type Filler = BlockComment | LineComment | Whitespace;
export type LineComment = ["//", string[]];
export type BlockComment = ["/*", [undefined, string][], "*/"];
export type Whitespace = string;
